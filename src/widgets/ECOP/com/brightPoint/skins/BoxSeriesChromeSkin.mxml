<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Copyright (c) 2008, Thomas W. Gonzalez

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

www.brightpointinc.com

*/
-->
<GraphicProgrammaticSkin xmlns:mx="http://www.adobe.com/2006/mxml" 
				   xmlns:flash.filters='flash.filters.*'
                   xmlns="http://www.degrafa.com/2007" 
                   xmlns:geometry="com.degrafa.geometry.*" 
                   xmlns:degrafa="com.degrafa.*"  implements="mx.core.IDataRenderer"
                   xmlns:repeaters="com.degrafa.geometry.repeaters.*">
	<mx:Script>
		<![CDATA[
			import mx.charts.series.items.BarSeriesItem;
			import mx.charts.series.items.ColumnSeriesItem;
			import mx.graphics.SolidColor;

		import mx.controls.Button;
		import mx.utils.ColorUtil;
		import mx.core.IDataRenderer;
		
		
		[Bindable]
		private var w:Number;
		
		[Bindable]
		private var h:Number;
		
		[Bindable]
		private var fillColor:Number=0xFF0000;
		
		private var _data:Object;
		
		/* public function set data(value:Object):void {
			_data=value;
			
			//Rotate the gradient for appropriate fill
			if (data is ColumnSeriesItem) backgroundFill.angle=0
			else if (data is BarSeriesItem) backgroundFill.angle=90;
			
			if (value.fill!=null && value.fill is SolidColor) {
				fillColor=value.fill.color;
			}
		}
		
		public function get data():Object {
			return _data;
		} */
				
		override protected function updateDisplayList( w:Number, h:Number ) : void
		{	
			super.updateDisplayList(w,h);
			this.w=w;
			this.h=h;
		}
			
		]]>
	</mx:Script>
	
	
 	<fills>
	
		<LinearGradientFill id="backgroundFill">
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-100)}" ratio="0"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-30)}" ratio=".02"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-10)}" ratio=".02"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-20)}" ratio=".15"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,30)}" ratio=".15"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,0)}" ratio=".45"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-20)}" ratio=".45"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,30)}" ratio=".90"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,0)}" ratio=".90"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-20)}" ratio=".98"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-80)}" ratio=".98"/>
			<GradientStop color="{ColorUtil.adjustBrightness(fillColor,-80)}" ratio="1"/>
		</LinearGradientFill>
	</fills>

    <strokes>
		<SolidStroke color="{fillColor}" id="myStroke"/>
    </strokes>

   	<!--<geometry>
   		<GeometryComposition>
   			<RegularRectangle width="4" height="5" fill="{backgroundFill}"/>
   		</GeometryComposition>
	</geometry>-->
</GraphicProgrammaticSkin>

