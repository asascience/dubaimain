<?xml version="1.0" encoding="utf-8"?>

<!--
/*
Copyright (c) 2008, Thomas W. Gonzalez

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

www.brightpointinc.com

*/
-->

<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" xmlns:microCharts="widgets.ECOP.com.brightPoint.microCharts.*" xmlns:controls="flexlib.controls.*" resize="onResize();" creationComplete="onCreationComplete(event)"
	horizontalScrollPolicy="off" verticalScrollPolicy="off"
	xmlns:skins="widgets.ECOP.com.brightPoint.skins.*" xmlns:degrafa="http://www.degrafa.com/2007" xmlns:controls1="widgets.ECOP.com.brightPoint.flexlib.controls.*" xmlns:s="library://ns.adobe.com/flex/spark">
<mx:Script>
	<![CDATA[
		import widgets.ECOP.com.brightPoint.skins.ChartSlicerRightMaskSkin;
		import widgets.ECOP.com.brightPoint.utils.ObjectUtil;
		
		import flash.events.Event;
		
		import mx.charts.Legend;
		import mx.charts.chartClasses.CartesianChart;
		import mx.collections.ArrayCollection;
		import mx.collections.ListCollectionView;
		import mx.collections.XMLListCollection;
        import mx.core.FlexGlobals;
		import mx.core.UIComponent;
		import mx.effects.AnimateProperty;
		import mx.effects.Tween;
		import mx.effects.easing.*;
		import mx.events.TweenEvent;
		import mx.skins.Border;
		import mx.skins.halo.ProgressTrackSkin;
		private var dummy:ChartSlicerRightMaskSkin;
		
		
		[Bindable]
		public var dataField:String;
		
		[Bindable]
		public var labelField:String;
		
		[Bindable]
		private var _leftReference:Number=0;
		
		[Bindable]
		private var _rightReference:Number=0;
		
		[Bindable]
		private var _computedWidth:Number=0;


		[Bindable]
		private var _chart:CartesianChart;
		
		[Bindable]
		private var _rangeData:Array;
		
		[Bindable]
		private var _proxyData:ArrayCollection;
		
		[Bindable]
		public var length:Number;

		public function set target(value:CartesianChart):void {
			_chart=value;
			setBindings();
		}
		
		public function get target():CartesianChart {
			return _chart;
		}
		
		private function setBindings():void {
			//Complete hack to keep track of when the underlying data may have changed
			_chart.addEventListener("updateComplete",chart_onUpdateComplete);
		}
		
		private function onCreationComplete(e:Event):void {
			chart_onUpdateComplete();
		}
		
		private function chart_onUpdateComplete(e:Event=null):void {
			
			//Get chart gutters so we can match them
			var rect:Rectangle=_chart.computedGutters;
			_leftReference=rect.left+5;
			_rightReference=rect.right;
			_computedWidth=this.width-_leftReference-_rightReference;
			
			microChart.width=_computedWidth;
			
			if (_proxyData!=_chart.dataProvider && !_isSlicing) {
				
				_proxyData=new ArrayCollection();
				
				if (_chart.dataProvider is ListCollectionView)
					_rangeData=ObjectUtil.clone(_chart.dataProvider.source);
				else
					_rangeData=ObjectUtil.clone(_chart.dataProvider);
					
				microChart.dataProvider=_rangeData;
				length=_rangeData.length;
				
				if (dataField && dataField.length>0) {
					microChart.dataField=dataField;
				}
				
				_chart.dataProvider=_proxyData;
				
				slider.maximum=microChart.dataProvider.length-1;
				slider.values=[0,slider.maximum];
				slider.snapInterval=slider.maximum/1000;
				slider.width+=1;
				//slider.width-=1;//Need to toggle so the track skin redraws
				slider.invalidateDisplayList();
				slider.validateNow();
				slider.width-=1;
				slider_onChange();
			}
	
			_isSlicing=false;
		}
		
		
		private var _isSlicing:Boolean=false;
		public function sliceChart(start:Number,length:Number):void {

			//We set this until the next chart update to clear it - prevents issues with altering the data provider
			_isSlicing=true; 
			
			//Now slice our data from the original data provider
			if (_rangeData is ListCollectionView) {
				_proxyData.source=_rangeData.source.slice(start,length);
			}
			else if (_rangeData is Array) {
				_proxyData.source=_rangeData.slice(start,length);
			}
			
			//_chart.dataProvider=_proxyData;

		}
		private var _mouseDown:Boolean=false;
		
		[Bindable]
		public var lowValue:Number=0;
		[Bindable]
		public var highValue:Number=1;
		
		
		
		private function divider_onResize(e:Event=null):void {

			trace("mouseDown=" + _mouseDown);
			if (_mouseDown || !_rangeData) return;
			if (sliderEffect.isPlaying) return;


			 
			//var val1:Number = Math.round((leftMask.width)/(_computedWidth)/length);  //We add 10 to accomodate the skin overdraw that encompases the HDividedBox handle
			//var val2:Number = Math.round((1-(rightMask.width)/(_computedWidth))/(length));
			
			var val1:Number = Math.round((length-1)*(leftMask.width/_computedWidth)); //We add 10 to accomodate the skin overdraw that encompases the HDividedBox handle
			var val2:Number = Math.round((length-1)*(1-(rightMask.width/_computedWidth)));
			
			if (isNaN(val1) || isNaN(val2)) return;
			
			trace("Before val1=" + val1 + " val2=" + val2);
			
			if (val1==val2) {
				if (val1==0)
					val2=1;
				else if (val1>=length) 
					val1=length-1;
				else
					val2++;
			}
			trace("After val1=" + val1 + " val2=" + val2);
			
			lowValueEffect.fromValue=slider.values[0];
			lowValueEffect.toValue=val1;
			
			highValueEffect.fromValue=slider.values[1];
			highValueEffect.toValue=val2;			

			sliderEffect.play();
		}
		
		private function slider_onChange():void {

			leftMask.width=Math.round((_computedWidth)*slider.values[0]/(length-1));
			rightMask.width=Math.round((_computedWidth)*(1-(slider.values[1]/(length-1))));

			var index1:Number = Number(slider.values[0]) - (Number(slider.values[0]) % 1);
			var index2:Number = Number(slider.values[1]) - (Number(slider.values[1]) % 1);
			
			//status.text = microChart.dataProvider[index1][labelField]+"  to  "+microChart.dataProvider[index2][labelField];
			
			if (_chart && _rangeData && _rangeData.length>0) {
				var start:Number=Math.round(slider.values[0]);
				var length:Number=Math.round(slider.values[1]);
				if (start>=0) sliceChart(start,length);
			}
		}
		
		private function onMouseDown(e:Event):void {
			_mouseDown=true;
            FlexGlobals.topLevelApplication.stage.addEventListener("mouseUp",onMouseUp);
		}
		
		private function onMouseUp(e:Event):void {
            FlexGlobals.topLevelApplication.stage.removeEventListener("mouseUp",onMouseUp);
			_mouseDown=false;
			divider_onResize();
		}

		private function onResize():void {
			callLater(divider_onResize);
		}
		
		private function sliderDataTip(value:Number):String {
			var index:Number=value - (value % 1);
			
			if (labelField)
				return microChart.dataProvider[index][labelField];
			else 
				return "Item " + index; 
		}
		
	]]>
</mx:Script>

	<mx:Parallel id="sliderEffect">
		<mx:AnimateProperty property="lowValue" target="{this}" id="lowValueEffect" tweenUpdate="slider_onChange()" easingFunction="{Cubic.easeOut}"/>
		<mx:AnimateProperty property="highValue" target="{this}" id="highValueEffect" easingFunction="{Cubic.easeOut}" />
	</mx:Parallel>

	<microCharts:MicroLineChart left="{_leftReference}" height="{this.height-18}" id="microChart"/>
	<mx:HDividedBox alpha="0" height="20" left="{_leftReference-10}" width="{_computedWidth+20}" top="0" paddingBottom="15" bottom="8" dividerAffordance="8" id="hdivided" liveDragging="true" mouseDown="_mouseDown=true;" dividerRelease="_mouseDown=false; divider_onResize(event);"
					horizontalScrollPolicy="off">
		<mx:Canvas width="10" borderSkin="widgets.ECOP.com.brightPoint.skins.ChartSlicerLeftMaskSkin" backgroundAlpha=".2" backgroundColor="0" height="100%" resize="divider_onResize(event);" id="leftMask"
				   borderStyle="inset" borderColor="0x555555" horizontalScrollPolicy="off"/>
		<mx:Spacer width="100%"/>
		<mx:Canvas width="10" borderSkin="widgets.ECOP.com.brightPoint.skins.ChartSlicerRightMaskSkin" height="100%" resize="divider_onResize(event);" id="rightMask"
				   borderStyle="solid" borderColor="0x555555" horizontalScrollPolicy="off"/>
	</mx:HDividedBox>
	<controls1:HSlider height="20" bottom="5" id="slider" left="{_leftReference-6}" right="{_rightReference-2}" width="{_computedWidth+15}" change="slider_onChange()" 
					   thumbUpSkin="{null}" thumbDownSkin="{null}" mouseDown="onMouseDown(event)" mouseUp="onMouseUp(event);"
					   thumbOverSkin="{null}" lockRegionsWhileDragging="true"
					   trackHighlightSkin="widgets.ECOP.com.brightPoint.skins.ChartSlicerThumbSkin"
					   allowTrackClick="false" allowThumbOverlap="false"  dataTipFormatFunction="sliderDataTip"
					   liveDragging="true"  trackSkin="widgets.ECOP.com.brightPoint.skins.ChartSlicerTrackSkin"
					   showDataTip="true"  dataTipPlacement="top"   dataTipOffset="3"
					   showTrackHighlight="true"
					   thumbCount="2"
					   values="{[lowValue, highValue]}"
					   minimum="0" maximum="100" snapInterval="1"/>
	<!--<mx:Label text="yest" paddingTop="24" paddingLeft="120" id="status" fontSize="12" color="0xFFFFFF"/>-->	
</mx:Canvas>
