<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml"
           xmlns:skins="widgets.OilSpill.components.dougmccune.skins.*"
           xmlns:mccune="widgets.OilSpill.components.dougmccune.controls.*"
		   xmlns:flexlib="widgets.OilSpill.components.flexlib.controls.*"
           width="100%" height="100%" visible="false"
           creationComplete="createComplete()"
           x="10"
           horizontalScrollPolicy="off" verticalScrollPolicy="off">
         
  <mx:Style>
    
    .canvasContainerStyles
    {
        borderThickness: 1;
        borderColor: #333333;
        borderStyle: solid;
        backgroundColor: #FFFFFF;
        backgroundAlpha: 1;           
    }

  
    .yesAxisStyle
    {
        showLabels: true;
        tickPlacement: inside;
        showLine: false;
    }
    
    .noAxisStyle
    {
        showLine: false;
        showLabels: false;
        tickPlacement: none;
    }
    
    .mainChartStyle
    {
        gutterBottom: 25;
    }
    
    .gridlines
    {
        horizontalChangeCount: 1; 
        verticalChangeCount: 2;
        direction: both;
    }

    .hdividedbox
    {
        borderThickness: 1;
        borderColor: #CCCCCC;
        borderStyle: solid;
    }

    .linkbutton
    {
        paddingLeft: 0;
        paddingRight: 0;
        paddingTop: 0;
        paddingBottom: 0;    
    }
    
    .button
    {
        fillAlphas: 1,1;
        cornerRadius: 2;
    }



  </mx:Style>        

    <mx:Canvas id="mainChartContainer" x="0" y="25" width="{CHART_WIDTH}" height="{MAIN_CHART_HEIGHT}" 
                       horizontalScrollPolicy="off" verticalScrollPolicy="off"
                       styleName="canvasContainerStyles">
    
      <mx:HBox x="0" y="{mainChart.height - 25}" backgroundColor="#CDE2F8" width="100%" height="18" />
    
      <mx:AreaChart id="mainChart" x="-2" y="0" 
                    showDataTips="false" dataProvider="{mainData}"
                    width="{CHART_WIDTH}" height="{MAIN_CHART_HEIGHT}"
                    styleName="mainChartStyle" 
                    mouseMove="getChartDataPoint()" mouseOut="chartMouseOut()"
                    backgroundElements="{backgroundContents}">
          
          <mx:horizontalAxis>
              <mx:DateTimeAxis dataUnits="days" parseFunction="dateParse" labelFunction="formatDateLabel" />
          </mx:horizontalAxis>
          
        <mx:horizontalAxisRenderers>
          <skins:InnerAxisRenderer axisWidth="20"
                                   axisBackgroundAlpha="1" axisBackgroundColor="#CDE2F8"
                                   labelAlign="center" 
                                   labelFontSize="9" labelFontColor="#000000" />
        </mx:horizontalAxisRenderers>

        <mx:verticalAxis><mx:LinearAxis baseAtZero="false" /></mx:verticalAxis>
        
        <mx:verticalAxisRenderers>
            <skins:InnerAxisRenderer axisPosition="right" axisWidth="200" 
                                     axisBackgroundAlpha="0"
                                     labelFontSize="10" labelFontColor="#000000" />
        </mx:verticalAxisRenderers>

        <mx:series>
          <mx:AreaSeries id="largeSeries" name="{this._varLabel}" xField="{this._varTime}" yField="{this._varLabel}" 
                         areaFill="{new SolidColor(0xCDE2F8, 0.20)}"
                         areaStroke="{new Stroke(0x0066DD, 1)}"
                         fill="{new SolidColor(0x0066DD, 1)}" 
                         radius="3" form="segment"
                         updateComplete="seriesComplete()" />
			<!-- itemRenderer="widgets.OilSpill.components.dougmccune.skins.LineSeriesCustomRenderer" -->
        </mx:series>
        
        <mx:annotationElements>
            <mx:Canvas id="mainChartArea" width="100%" height="100%" buttonMode="true" 
                       mouseDown="setMouseDown(mainChart);" />
        </mx:annotationElements>

          
      </mx:AreaChart>
    
    </mx:Canvas>
    
    <!-- bottom chart with divided box for range selection -->
        <mx:Canvas id="rangeChartContainer"     
                   x="15" y="{mainChartContainer.y + mainChartContainer.height - 1}" 
                   width="{CHART_WIDTH - 31}" height="{RANGE_CHART_HEIGHT}" 
                   horizontalScrollPolicy="off" verticalScrollPolicy="off" 
                   styleName="canvasContainerStyles">
                   
            <mx:AreaChart x="-3" y="-1" id="rangeChart"
                          showDataTips="false" dataProvider="{rangeData}" 
                          width="{CHART_WIDTH}" height="{RANGE_CHART_HEIGHT}">
            
                <mx:horizontalAxis>
                  <mx:DateTimeAxis dataUnits="days" parseFunction="dateParse" />
                </mx:horizontalAxis>
                
                <mx:horizontalAxisRenderers>
                    <mx:AxisRenderer styleName="noAxisStyle" />
                </mx:horizontalAxisRenderers>
                
                <mx:verticalAxis><mx:LinearAxis baseAtZero="false" /></mx:verticalAxis>
                
                <mx:verticalAxisRenderers>
                    <mx:AxisRenderer styleName="noAxisStyle"  />
                </mx:verticalAxisRenderers>
                    
                <mx:series>
                    <mx:AreaSeries id="smallSeries" name="{this._varLabel}" xField="{this._varTime}" yField="{this._varLabel}" 
                                   areaFill="{new SolidColor(0xcde2f8, 0.20)}" 
                                   areaStroke="{new Stroke(0x0066dd, 1)}"
                                   form="curve" />
                </mx:series>
                
                <mx:annotationElements>
                    <!--<mx:HDividedBox id="dividedBox" horizontalScrollPolicy="off"
                                    width="100%" height="100%" 
                                    liveDragging="true" 
                                    dividerRelease="updateIndicatorValuesWithEffect();"
                                    dividerSkin="{blankDividerClass}"
                                    mouseOver="dividedBox.setStyle('dividerSkin', dividerClass);" 
                                    mouseOut="dividedBox.setStyle('dividerSkin', blankDividerClass);"
                                    styleName="hdividedbox"
                                    backgroundColor="#FFFFCC" backgroundAlpha="0.3">
                    
                        <mx:Canvas id="leftBox" backgroundColor="#FF6633" backgroundAlpha="0.5" width="50%" height="100%" 
                                   borderColor="#000000" borderStyle="solid" />
                        <mx:Canvas backgroundColor="#ffffff" backgroundAlpha="0" width="50%" height="100%" buttonMode="true" 
                                   mouseDown="setMouseDown(rangeChart);" />
                        <mx:Canvas id="rightBox" backgroundColor="#FF6633" backgroundAlpha="0.5" width="0%" height="100%" 
                                   borderColor="#000000" borderStyle="solid" />
                    
                    </mx:HDividedBox>-->     
                </mx:annotationElements>

               
            </mx:AreaChart>
            
        </mx:Canvas>    

        <!-- scroll bar and slider component for range selector -->
        <mx:Canvas id="rangeSelectorContainer" 
                       x="2" y="{rangeChartContainer.y + rangeChartContainer.height - 14}" 
                       width="100%" height="25" horizontalScrollPolicy="off">
        
            <!-- the background skin for our slider bar -->
            <skins:GradientBox width="{rangeSelectorContainer.width - 29}" height="12" x="14" y="8"
                               gradientColors="[#EEEEEE, #999999]"
                               gradientAlphas="[.5, 0.75]"
                               gradientRatios="[0, 255]"
                               gradientAngle="90"
                               borderColor="#999999" borderStyle="solid"
                                />
            <!-- button to move the entire range to the left -->                    
            <!--<mx:Button cornerRadius="2" width="14" height="12" x="0" y="8" 
                       click="clickUpdate(-mainData.length)" icon="{leftScroll}" styleName="button" />-->
            
            <!-- the dual drag slider which represents the range of data shown in the upper chart --> 
            <!--<flexlib:HSlider id="slider" x="14" y="0" height="25" width="{rangeSelectorContainer.width - 28}"
                                trackSkin="{blankDividerClass}" showDataTip="false"
                                showTrackHighlight="true"
                                allowTrackClick="false" allowThumbOverlap="false"
                                change="updateBox()"
                                thumbCount="2"
                                liveDragging="true" 
                                snapInterval="1"
                                values="{[leftIndicator.x, rightIndicator.x]}"
                                minimum="0" maximum="{rangeData.length}" /> -->
			<!-- trackHighlightSkin="widgets.OilSpill.components.dougmccune.skins.SliderThumbHighlightSkin" -->
                                
            <!-- button to move the entire range to the right -->                  
            <!--<mx:Button cornerRadius="2" width="14" height="12" x="{slider.width + 13}" y="8" 
                       click="clickUpdate(mainData.length)" icon="{rightScroll}" styleName="button" />-->
                       
        </mx:Canvas>


  <!-- invisible range value indicators which are bound to and represent the visible range boundaries for the upper chart -->
  <mx:Canvas x="15" y="{rangeSelectorContainer.y + rangeSelectorContainer.height - 5}" 
             width="{rangeData.length}" height="25" 
             horizontalScrollPolicy="off" visible="false" includeInLayout="false" >
      <mx:VRule id="leftIndicator" width="1" height="15" y="5" strokeColor="#000000" />
      <mx:VRule id="rightIndicator" width="1" height="15" y="5" strokeColor="#000000" />
  </mx:Canvas>


<!-- header text indicator values and range link buttons -->
        <mx:HBox horizontalGap="0" horizontalAlign="left" width="{CHART_WIDTH}" verticalAlign="middle" paddingTop="2" horizontalScrollPolicy="off">
            <mx:Label text="Records" fontWeight="bold" />
            <mx:LinkButton styleName="linkbutton" fontWeight="normal" label="20" 
                           height="16" enabled="{ObjectUtil.numericCompare(rangeData.length, 20) == 1}"
                           click="moveSlider(leftIndicator, rightIndicator.x - 20, true);"  />
            <mx:LinkButton styleName="linkbutton" fontWeight="normal" label="60" 
                           height="16" enabled="{ObjectUtil.numericCompare(rangeData.length, 60) == 1}"
                           click="moveSlider(leftIndicator, rightIndicator.x - 60, true);" />
            <mx:LinkButton styleName="linkbutton" fontWeight="normal" label="120" 
                           height="16" enabled="{ObjectUtil.numericCompare(rangeData.length, 120) == 1}"
                           click="moveSlider(leftIndicator, rightIndicator.x - 120, true);" />
            <mx:LinkButton styleName="linkbutton" fontWeight="normal" label="240"
                           height="16" enabled="{ObjectUtil.numericCompare(rangeData.length, 240) == 1}"
                           click="moveSlider(leftIndicator, rightIndicator.x - 240, true);"  />
            <mx:LinkButton styleName="linkbutton" fontWeight="normal" label="Max ({rangeData.length})" 
                           height="16" 
                           click="moveSlider(leftIndicator, 0, true); moveSlider(rightIndicator, rangeData.length, true);" />
            <mx:Spacer width="100%" />
            <mx:HBox horizontalGap="0">
                <mx:Label text="{_selectedDate}" />    
                <mx:Label text="{_selectedData}" />
                <mx:Label text="{_selectedPercent}" />
            </mx:HBox>

        </mx:HBox>

  <!-- Background elements for main chart -->
  <mx:Array id="backgroundContents">
      <mx:GridLines styleName="gridlines" id="backgroundGrid" horizontalStroke="{new Stroke(0xCCCCCC, 1)}" verticalStroke="{new Stroke(0xCCCCCC, 1)}" />
      <mx:Canvas id="labelsCanvas" width="100%" height="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off" />
  </mx:Array>  


  <!-- Date Formatters -->
  <mx:DateFormatter id="labelMonthFormatter" formatString="MM/YY" />
  <mx:DateFormatter id="labelDayFormatter" formatString="MMM DD" />
  <mx:DateFormatter id="labelHourFormatter" formatString="MM/DD JJ" />
  <mx:DateFormatter id="labelMinuteFormatter" formatString="MM/DD/YY JJ:NN" />
  <mx:DateFormatter id="labelDefaultFormatter" formatString="EEE MMM D" />
  <mx:DateFormatter id="fullDateFormat" formatString="YYYY-MM-DD" />
  <mx:DateFormatter id="labelSummaryDateFormatter" formatString="MM/DD/YY JJ:NN" />
  
  <mx:NumberFormatter id="percentageFormatter" useNegativeSign="true" precision="2" />
  <mx:NumberFormatter id="verticalAxisFormat" precision="1" />
  <mx:NumberFormatter id="dataFormat" precision="2" />

    <mx:Script>
    <![CDATA[
      
      import mx.graphics.SolidColor;
      import mx.graphics.Stroke;
      import mx.controls.Alert;
      import mx.collections.ArrayCollection;

      import mx.controls.Text;
      import mx.events.DividerEvent;
      import mx.events.TweenEvent;
      import mx.events.EffectEvent;
      import mx.effects.Move;
      import mx.effects.easing.Cubic;
      import mx.events.SliderEvent;
      import mx.charts.chartClasses.CartesianChart;
      import mx.utils.ObjectUtil;
      import mx.charts.series.AreaSeries;

 
      [Bindable] private var mainData:ArrayCollection = new ArrayCollection();
      [Bindable] private var rangeData:ArrayCollection = new ArrayCollection();
      [Bindable] private var MAIN_CHART_HEIGHT:Number = 200;
      [Bindable] private var RANGE_CHART_HEIGHT:Number = 40;
      [Bindable] private var CHART_WIDTH:Number;
      
      //static positions of left and right indicators set in setMouseDown and used in moveChart to calulate new positions
      private var staticLeftBoundary:Number;
      private var staticRightBoundary:Number;
      //the static mouse position where we've clicked... used to calculate move differences in moveChart
      private var mouseXRef:Number;
      //flags to determine which chart we've clicked on for the drag... set in setMouseDown used it moveChart
      private var rangeDrag:Boolean = false;
      private var mainDrag:Boolean = false;
      //the ratio between the width of the range control, and the length of the full dataset
      private var rangeDataRatio:Number = 1;
      //enabled when the slider is directly updating the box positions for realtime drag
      //disabled when divider is moved and dropped inside easing effect for delayed move
      private var updateBoxFromSlider:Boolean = false;
      //a flag to allow the updateComplete event on AreaSeries to run only once on startup
      private var allowUpdateComplete:Boolean = false;
      //skins used for scroll button arrows and divider boundar grab points
      [Embed(source="widgets/OilSpill/assets/images/divider.png")] [Bindable] public var dividerClass:Class;
      [Embed(source="widgets/OilSpill/assets/images/blank.png")] [Bindable] public var blankDividerClass:Class;
      [Embed(source="widgets/OilSpill/assets/images/left_scroll.png")] [Bindable] public var leftScroll:Class;
      [Embed(source="widgets/OilSpill/assets/images/right_scroll.png")] [Bindable] public var rightScroll:Class;

      //values used in text instances above chart for current data point data
      [Bindable] private var _selectedDate:String;
      [Bindable] private var _selectedData:String;
      [Bindable] private var _selectedPercent:String;
      
      [Bindable] private var _varLabel:String;
      [Bindable] private var _varUnits:String;
      [Bindable] private var _varTime:String;

      private function dateParse(value:String):Date
      {
		  trace("dateParse");
		  trace(value);
		  if(value) {
          var date:Array = value.split("T");
          var dateStr:String = date[0];
          var timeStr:String = date[1];
          dateStr = dateStr.replace(/\-/g, "/");
          timeStr = timeStr.replace("Z", "");
          dateStr = dateStr + " " + timeStr.split(".")[0];
          return new Date(Date.parse(dateStr));
		  } else {
			  return new Date();
		  }
      }

      private function createComplete() : void {
        moveSlider(rightIndicator, rangeData.length, true);
        //rangeDataRatio = ((dividedBox.width - 30) / rangeData.length);

      }

      private function formatDateLabel(value:Number, prevValue:Number, axis:DateTimeAxis):String
      {
        var dateValue:Date = new Date();
        dateValue.setTime(value);
        switch(axis.labelUnits) {
          case "months":
            return labelMonthFormatter.format(dateValue);
            break;
          case "days":
            return labelDayFormatter.format(dateValue);
            break;
          case "hours":
            return labelHourFormatter.format(dateValue);
            break;
          default:
            return labelDefaultFormatter.format(dateValue);
            break;
        }
      }

      /**
         * Called from updateComplete on Main chart series... when data is completely loaded, we set the defaults for the sliders and divider
         * boxes etc... filtered to only run once (allowUpdateComplete) when the application first loads
         */
		
            private function seriesComplete():void
            {
                if(mainData.length > 0 && allowUpdateComplete == false)
                {
                    allowUpdateComplete = true;
                    //updateIndicatorsQuietly();
                    updateBoxFromSlider = true;
                    //updateBox();
                    this.visible = true;
                }    
            }
                    
        /**
         * Called throughout to update the mainData range of data that is displayed by slicing the 
         * range data to the left and right values.
         */
            private function updateMainData():void
            {
                mainData.source = rangeData.source.slice(leftIndicator.x, rightIndicator.x);
                chartMouseOut();
            }
            
        /**
         * Called from the slider value changes.  It is filtered to only change when the slider calling it 
         * directly.  The updateBoxFromSlider value is set to false when the moveSlider function effect is 
         * playing because the box widths have already been set by the dividerRelease calling 
         * updateIndicatorValuesWithEffect.
         */
		
		/*

            private function updateBox():void
            {
                if(updateBoxFromSlider)
                {
                    //setting the box width value to the slider value times the ratio (to decrease 
                    //it to the equivalent width percentage
                    //eg. full divided box width = 500, rangeDataRatio = 1/5 would equal 100 for the 
                    //proper left box width equal to range index value
                    leftBox.width = slider.values[0] * rangeDataRatio;
                    rightBox.width = dividedBox.width - ( slider.values[1] * rangeDataRatio );
                    leftIndicator.x = slider.values[0];
                    rightIndicator.x = slider.values[1];
                    updateMainData();
                }
            }
            
        /**
         * Updates the range by moving the entire range left or right by a fixed number of units
         */
		
		/*

             private function clickUpdate(value:int = 0):void
             {
                leftIndicator.x += value; rightIndicator.x += value;
                slider.dispatchEvent(new SliderEvent('change'));
             }
       
        /**
         * Called from the divided box dividerRelease.  Calls a Move for the left and right Indicator 
         * x values which has an easing function
         * applied.
         */

		/*
            private function updateIndicatorValuesWithEffect():void
            {
                //setting indicator positions to the box width divided by the ratio (to increase 
                //it to the equivalent range value)
                //eg. left box width = 100, rangeDataRation = 1/5 would equal 500 for the range index value
                moveSlider(leftIndicator, (leftBox.width  / rangeDataRatio), false);
                moveSlider(rightIndicator, ((dividedBox.width - rightBox.width) / rangeDataRatio), false);
                
            }
        /* 
        /**
         * Called from the thumbRelease on the slider instance, as well as creationComplete 
         * to set the initial range values.
         * Updates the left and right indicator x values without the move effect.
         */
		/*

            private function updateIndicatorsQuietly():void
            {
                //these two values are mapped 1:1 as the slider values and indicator values equal the rangeData length exactly
                leftIndicator.x = slider.values[0];
                rightIndicator.x = slider.values[1];
            }
		*/
	

            
        /**
         * Moves the left and right indicator x values with an easing transition applied.  update 
         * dictates whether this should update the divided box range measurements (false if we're calling this 
         * from the divided box release) callbackFunc can be passed to get called when the move is finished.
         */
            private function moveSlider(target:VRule, xTo:Number, update:Boolean, callbackFunc:Function = null, ... rest):void
            {
                var moveIndicator:Move = new Move();
                moveIndicator.end();
                moveIndicator.easingFunction = Cubic.easeOut;
                moveIndicator.duration = 750;
                moveIndicator.target = target;
                moveIndicator.xTo = xTo;
                moveIndicator.addEventListener(EffectEvent.EFFECT_START, function():void {updateBoxFromSlider = update});
                moveIndicator.addEventListener(TweenEvent.TWEEN_UPDATE, function():void { mainData.source = rangeData.source.slice(leftIndicator.x, rightIndicator.x); 
                                                                                          });
                moveIndicator.addEventListener(EffectEvent.EFFECT_END, function():void {updateBoxFromSlider = true; 
                                                                                        if(callbackFunc != null) callbackFunc.call(this, rest)});
                moveIndicator.play();
            }
            
        /**
         * Called from range chart or main chart and determines the position of the mouse as well as left 
         * and right indicators (for static comparison when moving) and adds systemManager events
         * to capture mouse movement.  The values set here are used in the moveChart function to calculate 
         * new position differences with start position
         */
            private function setMouseDown(theChart:CartesianChart):void
            {
                //don't capture for drag if we're viewing the entire range of data
                if(!(leftIndicator.x == 0 && rightIndicator.x == rangeData.length))
                {
                    mouseXRef = this.mouseX;
                    staticLeftBoundary = leftIndicator.x;
                    staticRightBoundary = rightIndicator.x;
                    if(theChart == mainChart) mainDrag = true;
                    if(theChart == rangeChart) rangeDrag = true;
                    this.systemManager.addEventListener(MouseEvent.MOUSE_MOVE, moveChart);
                    this.systemManager.addEventListener(MouseEvent.MOUSE_UP, stopDragging);
                }
            }
            
        /**
         * Called when systemManager receives mouseUp event.  Sets the indicators for which range is 
         * being dragged to false, and removes the system manager event listeners for drag movement.
         */
            private function stopDragging(event:MouseEvent):void
            {
                rangeDrag = false;
                mainDrag = false;
                this.systemManager.removeEventListener(MouseEvent.MOUSE_MOVE, moveChart);
                this.systemManager.removeEventListener(MouseEvent.MOUSE_UP, stopDragging);
            }
            
        /**
         * Determines which chart instance is being dragged, and updates the left and right indicator x values
         */
            private function moveChart(event:MouseEvent):void
            {
                if(mainDrag)
                {
                    leftIndicator.x = staticLeftBoundary + (mouseXRef - this.mouseX) / 
                                                           (mainChartArea.width / mainData.length);
                    rightIndicator.x = staticRightBoundary + (mouseXRef - this.mouseX) / 
                                                             (mainChartArea.width / mainData.length);
                }
                else if(rangeDrag)
                {
                    leftIndicator.x = staticLeftBoundary - (mouseXRef - this.mouseX) / rangeDataRatio;
                    rightIndicator.x = staticRightBoundary - (mouseXRef - this.mouseX) / rangeDataRatio;
                }
            }



      public function set varData(a:ArrayCollection) : void {
        var tmpData:ArrayCollection = a;
        rangeData = tmpData;
        mainData = new ArrayCollection(rangeData.source);
      }
      
      public function set varUnits(s:String) : void {
        this._varUnits = s;
      }
      
      public function set varLabel(s:String) : void {
        this._varLabel = s;
      }
      
      public function set varTime(s:String) : void {
        this._varTime = s;
      }
      
      
        /**
         * Finds the DateTimeAxis value (the date) of the mouseover position and the highlights the corresponding
         * itemRenderer at that point by looping through data until matching date values are found
         */
            private function getChartDataPoint():void
            {
                //filtering to only run if the full dataset is present in the chart... 
                //this value is false if the indicator move effect is playing
                if(updateBoxFromSlider)
                {
                    var chartPoint:Object = getChartCoordinates(new Point(mainChart.mouseX, mainChart.mouseY), mainChart);
                    var formattedDate:String = labelMinuteFormatter.format(new Date(chartPoint.x));
                    var fdate:Date = new Date(chartPoint.x);
                    // Something large.  We will never graph this many values.
                    var closest:int = 9999999999;
                    var closestIndex:int = 0;
                    var closestData:Object;
                    var diff:int = 0;
                    for(var i:int = 0; i < mainData.length; i++)
                    {
                        mainChart.series[0].getChildAt(i + 1).showRenderer(false);
                        var dataItem:Object = mainData.getItemAt(i);
                        
                        diff = Math.abs(fdate.time - dateParse(dataItem[this._varTime]).time);
                        if (diff < closest) {
                          closest = diff;
                          closestIndex = i;
                          closestData = dataItem;
                        }
                    }

                    mainChart.series[0].getChildAt(closestIndex + 1).showRenderer(true);
                    _selectedDate = labelMinuteFormatter.format(dateParse(closestData[this._varTime]));
                    _selectedData = 'Value: ' + dataFormat.format(Number(closestData[this._varLabel])) + " " + this._varUnits;
                    _selectedPercent = '';

                }
            }
            
        /**
         * Called when cursor is moved off of main chart area.  Clears any values that are bound 
         * to mouseover position, and clears all
         * LineSeriesCustomRenderers on the chart that are showing
         */
            private function chartMouseOut():void
            {
                var sum:Number = 0;
                for(var i:int = 0; i < mainData.length; i++)
                { 
                    try
                    {
                        sum = sum + Number(mainData.getItemAt(i)[this._varLabel]);
                        mainChart.series[0].getChildAt(i + 1).showRenderer(false);
                    }
                    catch(e:Error) {};
                }
                if (mainData.length != 0) {
                  _selectedDate = labelSummaryDateFormatter.format(dateParse(mainData.getItemAt(0)[this._varTime])) + ' - ' + 
                                  labelSummaryDateFormatter.format(dateParse(mainData.getItemAt(mainData.length - 1)[this._varTime]));
                  _selectedPercent = "Avg: " + percentageFormatter.format(sum / mainData.length - 1) + " " + this._varUnits;
                  _selectedData = '';
                }
            }
               
         /**
         * Finds the DateTimeAxis value (the date) of the mouseover position
         */   
            private function getChartCoordinates(thePos:Point, theChart:CartesianChart):Object
            {
                var tmpArray:Array;
                if(theChart.series[0] != null)
                {
                    tmpArray = theChart.series[0].dataTransform.invertTransform(thePos.x, thePos.y);
                    return {x:tmpArray[0], y:tmpArray[1]};
                }
                else
                {
                    return null;
                }
            }
            
        /**
         * Updates the date range display to reflect the current position of the divided box drag
         */ 
		/*
            private function setDividerDragDate():void
            {
                var tmpLeftIndex:int = leftBox.width  / rangeDataRatio;
                var tmpRightIndex:int = ((dividedBox.width - rightBox.width) / rangeDataRatio) - 1;
                var rangeDataLength:int = rangeData.length;
                _selectedDate = labelSummaryDateFormatter.format(dateParse(rangeData.getItemAt(tmpLeftIndex)[this._varTime])) + ' - ' + 
                                labelSummaryDateFormatter.format(dateParse(rangeData.getItemAt(tmpRightIndex)[this._varTime]));
            }
		*/
            
            public function set chartSize(n:Number) : void {
              this.CHART_WIDTH = n;
            }
            
    ]]>
  </mx:Script>

  
</mx:Canvas>

