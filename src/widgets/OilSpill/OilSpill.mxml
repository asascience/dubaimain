<?xml version="1.0" encoding="utf-8"?>
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   xmlns:esri="http://www.esri.com/2008/ags"
				   xmlns:util="widgets.OilSpill.components.util.*" 
				   xmlns:viewer="com.esri.viewer.*" creationPolicy="all"
				   xmlns:OilSpill="widgets.OilSpill.*"
				   xmlns:net="flash.net.*"
				   xmlns:asa="widgets.OilSpill.components.asa.*"
				   widgetConfigLoaded="init()"
				   currentState="scenarios" xmlns:components="com.esri.viewer.components.*">

	<viewer:states>
		<s:State name="scenarios" />
		<s:State name="spill" />
		<s:State name="winds" />
		<s:State name="currents" />
		<s:State name="review" />
		<s:State name="graph" />
		<s:State name="layers" />
		
	</viewer:states>	
	<fx:Style>
		@namespace mx "library://ns.adobe.com/flex/mx";
		@namespace s "library://ns.adobe.com/flex/spark";
		
		s|TextInput {
			skinClass: ClassReference("com.esri.viewer.skins.TextInputSkin");
		}
		mx|TextInput{
			borderColor:#AAB3B3;
			backgroundAlpha:1;
			backgroundColor:#F4F5F6;
			dropShadowEnabled:false;
			fontSize:12;
			themeColor:#28C8C8;
			focusColor:#64b1cb;
		}
		s|TextArea {
			borderAlpha: .4;
			borderColor: #CCCCCC;
			dropShadowEnabled:false;
			backgroundColor:#F4F5F6;
			focusColor:#64b1cb;
		}
		mx|NumericStepper{
			borderAlpha: .4;
			dropShadowEnabled:false;
			borderColor: #CCCCCC;
			focusColor:#64b1cb;
		}
		mx|ToolTip {
			backgroundAlpha: 1.0;
			backgroundColor: black;
			color: white;
			cornerRadius: 8;
			fontSize: 18;
		}
	</fx:Style>
	
	<fx:Metadata>
		[ResourceBundle("OilSpill")]
	</fx:Metadata>
	<fx:Script>
		<![CDATA[
			import com.esri.ags.Graphic;
			import com.esri.ags.SpatialReference;
			import com.esri.ags.events.DrawEvent;
			import com.esri.ags.geometry.Extent;
			import com.esri.ags.geometry.Geometry;
			import com.esri.ags.geometry.MapPoint;
			import com.esri.ags.geometry.Polygon;
			import com.esri.ags.geometry.Polyline;
			import com.esri.ags.geometry.WebMercatorExtent;
			import com.esri.ags.geometry.WebMercatorMapPoint;
			import com.esri.ags.layers.GraphicsLayer;
			import com.esri.ags.symbols.SimpleFillSymbol;
			import com.esri.ags.symbols.SimpleLineSymbol;
			import com.esri.ags.tools.DrawTool;
			import com.esri.ags.utils.WebMercatorUtil;
			import com.esri.viewer.AppEvent;
			import com.esri.viewer.ViewerContainer;
			import com.esri.viewer.utils.Hashtable;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.CloseEvent;
			import mx.events.ListEvent;
			import mx.events.StateChangeEvent;
			import mx.resources.ResourceManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.soap.WebService;
			
			import org.openscales.proj4as.Proj4as;
			import org.openscales.proj4as.ProjPoint;
			import org.openscales.proj4as.ProjProjection;
			
			import spark.events.IndexChangeEvent;
			
			import widgets.OilSpill.components.util.DegToDMS;
			import widgets.OilSpill.components.util.SpillEvent;
			import widgets.OilSpill.components.wms.WMSEDSModel;
			import widgets.OilSpill.components.wms.WMSModel;
			import widgets.ShapeFiles.ShpPolygon;
			import widgets.ShapeFiles.ShpReader;
			import widgets.TimeSlider.components.util.DateTimeUtilities;
			//private var _demisMap:WMSMapLayer;
			
		//location for header/state icons
			private const ICON_URL:String = "widgets/OilSpill/assets/images/";
			
			private var counter:int = 0;
			
		//WMS urls
			private var _edsSource:String;
			private var _OilStringSource:String;
			private var _OilModelSource:String;
			private var _edsEcopModelSource:String;
			private var _DataSource:String;		
			private var _TimeSeriesSource:String;
			private var _key:String;
			
		//Load&Save scenarios
			[Bindable]
			private var ldpScenarios:ArrayCollection = new ArrayCollection();
			private var save:Boolean=false;
			
			[Bindable]
			private var ldpRuns:ArrayCollection = new ArrayCollection();
			private var LoadxmlRslt:XML;
			
			[Bindable]
			private var windsDP:ArrayCollection = new ArrayCollection();
			private var windTitle:String="DUBAIWND_WINDS";
			
			[Bindable]
			private var curDP:ArrayCollection = new ArrayCollection();
			private var curTitle:String="ARG_DUB_CURRENTS";
			
			private var tempD:Date = new Date;
			private var dateRange:Object = {rangeStart:new Date(tempD.getTime()-1000 * 60 * 60 * 24 * 1000),rangeEnd:new Date(tempD.getTime()+(1000 * 60 * 60 * 24 * 3))};
			
			[Bindable]
			private var date:String;
			private var waterTempC:Number;
			private var waterTempF:Number;
			
			private var _location:String;
			private var _loadLocation:String;
			private var _path:String;
			
			[Bindable]
			private var windtype:String = new String;
			[Bindable]
			private var curtype:String = new String;
			
		//Scenarios Variables//for the oil spill site
			[Bindable]
			private var graphicsLayer:GraphicsLayer;
			private var hashTable:Hashtable;
			private var boomsCol:ArrayCollection;
			private var overflightsCol:ArrayCollection;
			private var boomsXMLString:String;
			private var overflightsXMLString:String;
			
			//lat&long points
			[Bindable]private var textN:String;
			[Bindable]private var textW:String;
			[Bindable]private var latlong_store:MapPoint;
			private var mouseClick:MouseEvent = null;
			
		//Winds, Currents, & Run Model Variables						
			private var windID:int;
			private var windSP:String;
			private var windsDR:String;
			
			private var windsmanual:Boolean = false;
			private var currentsmanual:Boolean = false;
			
			private var windSPTypeKn:Number;
			private var windSPTypeMe:Number;
			private var windSPTypeCM:Number;
			private var windSPTypeMM:Number;
			
			private var lastWinds:Number = new Number();
			
			private var curID:int;
			private var curSP:String;
			private var curDR:String;
			
			private var curSPTypeKn:Number;
			private var curSPTypeMe:Number;
			private var curSPTypeCM:Number;
			private var curSPTypeMM:Number;
			
			private var lastCurrents:Number = new Number();
			//manual winds and currents datagrid dataprovider
			[Bindable]
			private var sourceSelectedIndex:Number = 0;
			[Bindable]
			private var manualWindsRows:ArrayCollection;
			[Bindable]
			private var manualCurrentsRows:ArrayCollection;
			private var manualWindsString:String;
			private var manualCurrentsString:String;
			
			private var windsLegendIcon:Image = new Image();
			private var currentsLegendIcon:Image = new Image();
			
		//Review Variables
			[Bindable]
			private var response:String = "";
			private var _modelType:String = "OILSPILL";
			[Bindable]
			private var _oilMODEL:WMSModel;
			//Added Winds and Currents WMS layers
			[Bindable]
			private var _oilMODELW:WMSEDSModel;
			[Bindable]
			private var _oilMODELC:WMSEDSModel;
		//Review winds and currents Variables
			[Bindable]
			private var _windsMODEL:WMSEDSModel;
			[Bindable]
			private var _currentsNcomMODEL:WMSEDSModel;
			[Bindable]
			private var _currentsChinaMODEL:WMSEDSModel;
			[Bindable]
			private var _sstMODEL:WMSEDSModel;
			private var _windsType:String;
			private var _currentsType:String;
			
			[Bindable]
			private var forecastUsed:Boolean = true;
		
		//Run check for new winds/currents
			private var _runWCcheck:Boolean = false;
		//Variables to Run TimeSlider
			private var _runCheck:Boolean = false;
			private var _currentTime:Date = new Date();
			private var _currentLayers:Array;
			private var _startDate:Date = new Date();
			private var _endDate:Date = new Date();
			
			private var oilWarningLayer:GraphicsLayer = new GraphicsLayer;
			
			//timezone var
			//initial time zone as GMT
			private var _timeZone:Number=0;
			
			//configurable using configFile for delete scenario
			private var adminText:String;
			private var passwordText:String;
			
			private var currlayArrCol:ArrayCollection = new ArrayCollection();
			private var windlayArrCol:ArrayCollection = new ArrayCollection();
			
			private var userArray:String;
			
			[Bindable]
			private var toEarly:Boolean = false;
			[Bindable]
			private var reviewDis:Boolean = false;
			
			private function init():void
			{
				//Prepare Graphics Layers for Click Point
				graphicsLayer = new GraphicsLayer();
				graphicsLayer.name = "DrawFeatures";
				graphicsLayer.id = "DrawFeatures";
				map.addLayer(graphicsLayer);
				
				//Event Listeners for Widget to Widget talk
				ViewerContainer.addEventListener(AppEvent.TIME_SLIDER_TIME_CHANGED, updateMapTime);
				
				var scenariosLabel:String;
				var propertiesLabel:String;
				var spillLabel:String;
				var windsLabel:String;
				var currentsLabel:String;
				var reviewLabel:String;
				var layersLabel:String;
				var graphLabel:String;
				
				if (configXML)
				{
					//labels for states and panels
					adminText = configXML.admi;
					passwordText = configXML.pwor;
					scenariosLabel = configXML.labels.scenarioslabel || "Scenarios";
					propertiesLabel = configXML.labels.propertieslabel || "Properties";
					spillLabel = configXML.labels.spilllabel || "Spill";
					windsLabel = configXML.labels.windslabel || "Winds";
					currentsLabel = configXML.labels.currentslabel || "Currents";
					reviewLabel = configXML.labels.reviewlabel || "Review";
					layersLabel = configXML.labels.layerslabel || "Layers";
					graphLabel = configXML.labels.graphlabel || "Graphs";
					
					//configurable wind and current options in config file
					var curlays:String = configXML.currentsLayers;
					var layArray:Array = curlays.split(",");
					var curlaysLabel:String = configXML.currentsLayersLabel;
					var layLabArray:Array = curlaysLabel.split(",");
					
					var winlays:String = configXML.windsLayers;
					var winlayArray:Array = winlays.split(",");
					var winlaysLabel:String = configXML.windsLayersLabel;
					var winlayLabArray:Array = winlaysLabel.split(",");
					
					for (var i:int = 0; i < layArray.length; i++) {
						var newLayer:Object = new Object();
						newLayer.data = layArray[i];
						newLayer.label = layLabArray[i];
						currlayArrCol.addItem(newLayer);
					}
					for (var r:int = 0; r < winlayArray.length; r++) {
						var newLayerW:Object = new Object();
						newLayerW.data = winlayArray[r];
						newLayerW.label = winlayLabArray[r];
						windlayArrCol.addItem(newLayerW);
					}
					
					_location = configXML.location;
					_loadLocation = configXML.location;

					_edsSource = configXML.ASAEDS.eds;
					_OilStringSource = configXML.ASAOilString.oilstring;
					_OilModelSource = configXML.ASAOilModel.oilmodel;
					_edsEcopModelSource=configXML.ASAOilModel.ecop;
					_DataSource = configXML.ASALoadSaveSOURCE.loadSave;
					_TimeSeriesSource = configXML.ASATimeSeries.timeseries;
					_key = configXML.clientkey;
					
					var filesource:String = configXML.oilWarning;
					urlLoader.addEventListener(Event.COMPLETE,layercompleteHandler);
					
					urlLoader.load( new URLRequest(filesource));
				}				
				
				wOilSpill.addTitlebarButton(ICON_URL + "i_scenarios.png", scenariosLabel, showStateScenarios,true,true,"Scenario",66);
				wOilSpill.addTitlebarButton(ICON_URL + "i_spill.png", spillLabel, showStateSpill,true,true,"Oil",37);
				wOilSpill.addTitlebarButton(ICON_URL + "i_winds.png", windsLabel, showStateWinds,true,true,"Winds",52);
				wOilSpill.addTitlebarButton(ICON_URL + "i_currents.png", currentsLabel, showStateCurrents,true,true,"Currents",66);
				wOilSpill.addTitlebarButton(ICON_URL + "i_review.png", reviewLabel, showStateReview,true,true,"Review",57);
				wOilSpill.addTitlebarButton(ICON_URL + "i_graph.png", "Layers", showLayers,true,true,"Layers",57);
				wOilSpill.addTitlebarButton(ICON_URL + "i_graph.png", graphLabel, showStateGraph,true,true,"Graph",51);
				
				windsLegendIcon.source = "assets/legends/WindLegend.png";
				currentsLegendIcon.source="assets/legends/CurrentsLegend.png";
				
				//Prepares initial screen
				showStateScenarios();
				currentState="scenarios";
				textN = null;
				textW = null;
				
				this.addEventListener(StateChangeEvent.CURRENT_STATE_CHANGE, stateChange);
				//add event listener dispatched from legendManager wedget
				//ViewerContainer.addEventListener(AppEvent.WINDS_STYLE_CHANGE,changeWindsStyle);
				//ViewerContainer.addEventListener(AppEvent.CURRENTS_STYLE_CHANGE,changeCurrentsStyle);
				ViewerContainer.addEventListener(AppEvent.TIME_ZONE_CHANGED,changeTimeZone);
				//add event listener dispatched from datamanager
				refreshHashTable();
				fetchSharedData();
				if(hashTable.containsKey("timezone"))
				{
					_timeZone=hashTable.find("timezone") as Number;
				}
				else
				{
					var tempDate:Date=new Date();
					_timeZone=-tempDate.getTimezoneOffset()/60;
					if(_timeZone<0)
					{
						_timeZone = 4;
					}
				}
			}
			
			///Shapefile add for Oil Warning layer (no DBF attributes)
			private function layercompleteHandler(event:Object):void
			{
				var shpByteArray:ByteArray = new ByteArray;
				shpByteArray = urlLoader.data as ByteArray;
				if (shpByteArray && shpByteArray.length > 0 )
				{
					loadShapefile_inun(shpByteArray);
				}
				else
				{
					Alert.show("Sorry, but there is a problem with the shapefile.");
				}
			}
			
			private function loadShapefile_inun(shpByteArray:ByteArray):void
			{
				var index:int = 0;
				var shpReader:ShpReader = new ShpReader(shpByteArray);
				var shapeType:int = shpReader.readShpType();
				while (shpReader.hasMore()) {
					if (shapeType == 5) {
						var shpPolygon:ShpPolygon = shpReader.readShpPolygon();
						oilWarningLayer.add(new Graphic(shpPolygon.toPolygon()));
						oilWarningLayer.symbol = mySymbol;
						oilWarningLayer.refresh();
						index++;
					}
				}
				oilWarningLayer.id = "oilWarningLayer";
				oilWarningLayer.visible = false;
				map.addLayer(oilWarningLayer);
			}
			
			//get the hashtable
			private function refreshHashTable():void
			{
				ViewerContainer.addEventListener(AppEvent.DATA_SENT, receivedData);
				//dispatch the event, methods in BaseWidget
				fetchSharedData();
			}
			private function receivedData(event:AppEvent):void
			{
				hashTable=event.data as Hashtable;
				if(hashTable.containsKey("loginuser"))
				{
					userArray=hashTable.find("loginuser");
				}
			}
			
			private function stateChange(event:StateChangeEvent):void 
			{
				map.doubleClickZoomEnabled = false;
				switch (currentState) {
					case "scenarios":
						wOilSpill.selectedTitlebarButtonIndex = 0;
						break;
					case "spill":
						wOilSpill.selectedTitlebarButtonIndex = 1;
						break;
					case "winds":
						wOilSpill.selectedTitlebarButtonIndex = 2;
						break;
					case "currents":
						wOilSpill.selectedTitlebarButtonIndex = 3;
						break;
					case "review":
						wOilSpill.selectedTitlebarButtonIndex = 4;
						break;
					case "layers":
						wOilSpill.selectedTitlebarButtonIndex = 5;
						break;
					case "graph":
						wOilSpill.selectedTitlebarButtonIndex = 6;
						break;	 
				}
			}
			private function onFault(info:Object, token:Object = null):void
			{
				Alert.show(info.toString(), wOilSpill.widgetTitle);
			}
			private function showStateScenarios():void
			{	
				//convertMapPoint();
				currentState="scenarios";
			}			
			private function showStateSpill():void
			{
				if(textN!=""||textW!="")
				{
					//check to see if the spill point is in the correct extent
					var oilspillExtent:WebMercatorExtent = new WebMercatorExtent(54,24.9,55.4,25.8);
					var latzz:Number = Number(textN);
					var longzz:Number =Number(textW);
					var spillpoint:WebMercatorMapPoint = new WebMercatorMapPoint(longzz,latzz);
					
					if(oilspillExtent.contains(spillpoint)==false)
					{
						currentState = "spill";
						if(graphicsLayer.numGraphics > 0 || _oilMODEL)	
						{
							this.parent.dispatchEvent(new SpillEvent(SpillEvent.TIME_CHANGE, 'oil'));
							this.parent.dispatchEvent(new SpillEvent(SpillEvent.CASENAME_CHANGE, 'oil'));
							
							if(counter == 0)
							{
								counter = 1;
							}
						}
						if(counter == 0)
						{
							counter = 1;
						}
						
						if(runname.text == "")
						{
							runname.text = "OILSPILL_" + Math.round(Math.random() * 100);
						}
						waterTempChangeHandler();
						
						if((DateTimeUtilities.spillServiceDateWithTimeZone2UTC(_startDate,_timeZone) != "") && (DateTimeUtilities.spillServiceDateWithTimeZone2UTC(_endDate,_timeZone) != "") && (simlength.value > -1))
						{
							if(counter == 1)
							{
								counter = 2;
							}
						}
					}
					else{
						Alert.show("You are outside of the Spill Extent, please limit your spill location to the Arabian Gulf.","Spill Location Error");
					}
				}
				else
				{
					wOilSpill.selectedTitlebarButtonIndex = 0;
					showStateScenarios();
				}
			}
			
			private function showStateWinds():void
			{
				if(toEarly == true)
				{
					sourceSelectedIndex = 2;
				}
				if(counter > 1)
				{
					if((SpillType.selectedIndex > -1) && (volume.text > "") && (durSpill.value > -1))
					{
						currentState = "winds";
						sourceChangeWinds();
						windsSpeedChangeHandler();
						
						if(counter == 2)
						{
							counter = 3;
						}
					}
				}
			}
			private function showStateCurrents():void
			{
				if(toEarly == true)
				{
					sourceSelectedIndex = 2;
				}
				if(counter > 2)
				{
					if((winds_.selectedIndex > -1))
					{
						currentState = "currents";
						sourceChangeCurrents();
						currentsSpeedChangeHandler();
						
						if(counter == 3)
						{
							counter = 4;
						}
					}
				}
			}
			private function showStateReview():void
			{	
				if(forecastUsed == true && toEarly == true)
				{
					reviewDis = true;	
				}
				else{
					reviewDis = false;	
				}
				//add by Xiaowen
				//var startDateSave:String = DateTimeUtilities.spillServiceDate2(_startDate);
				//date=new String(startDateSave.charAt(6) + startDateSave.charAt(7) + "." + startDateSave.charAt(4) + startDateSave.charAt(5) + "." + startDateSave.charAt(0) + startDateSave.charAt(1) + startDateSave.charAt(2) + startDateSave.charAt(3));
				myDrawTool.deactivate();
				var spillSelectedDate:Date=new Date();
				spillSelectedDate = startSpill.dateASA.selectedDate;
				spillSelectedDate.hours = startSpill.hours.value;
				var startDateSave:String=DateTimeUtilities.spillServiceDate3(spillSelectedDate);
				date=new String(startDateSave);
				if(counter > 3)
				{
					if((currents_.selectedIndex > -1))
					{
						currentState = "review";
						
						if(counter == 4)
						{
							counter = 5;
						}
					}
				}
			}
			private function showStateGraph():void
			{
				if(response.search("land")>5)
				{
				}
				else{
					if(counter > 5)
					{
						if((currents_.selectedIndex > -1))
						{
							if(response != ""){
								this.currentState = "graph";
								datapanel.processSpill(_TimeSeriesSource, _modelType, response, _loadLocation,_key);
								
								if(counter == 6)
								{
									counter = 7;
								}
							}
						}
					}
				}
			}
			private function showLayers():void
			{				
				if(counter > 4)
				{
					if((currents_.selectedIndex > -1))
					{
						if(response != ""){
							currentState = "layers";
							
							if(counter == 5)
							{
								counter = 6;
							}
						}
					}
				}
			}
			
		//NEW SCENARIOS - FUNCTIONS			
			private function changeTextLat(event:Event):void
			{
				if(latDir1.text == "S") {
					textN = String((lat1.text as Number)*-1);
				} else {
					textN = lat1.text;
				}
				refreshMapPoint();
			}
			private function changeTextLon(event:Event):void
			{				
				if(longDir1.text == "W") {
					textW = String((long1.text as Number)*-1);
				} else {
					textW = long1.text;
				}
				refreshMapPoint();
			}
			
			//update and convert changes in DMLT coords to WGS84 for spill
			private function changeTextDM(event:Event):void
			{
				var dubai84g:ProjProjection= new ProjProjection("EPSG:3997");
				var wgs84g:ProjProjection= new ProjProjection("EPSG:4326");
				var oldPoint:ProjPoint = new ProjPoint(Number(long4.text),Number(lat4.text));
				var newPoint:ProjPoint=Proj4as.transform(dubai84g,wgs84g,oldPoint);
				textN = newPoint.y.toString();
				textW = newPoint.x.toString();
				
				refreshMapPoint();
			}
			private function changeTextLat2(event:Event):void
			{
				const Lat2:String = DegToDMS.formatDMtoDEG(new Number(lat2.text), new Number(lat2m.text), latDir2.text);
				textN = Number(Lat2).toFixed(3);
				refreshMapPoint();
			}
			private function changeTextLong2(event:Event):void
			{
				const Long2:String = DegToDMS.formatDMtoDEG(new Number(long2.text), new Number(long2m.text), longDir2.text);
				textW = Number(Long2).toFixed(3);
				refreshMapPoint();
			}
			private function changeTextLat3(event:Event):void
			{
				const Lat3:String = DegToDMS.formatDMStoDEG(new Number(lat3.text), new Number(lat3m.text), new Number(lat3s.text), latDir3.text);
				textN = Lat3;
				refreshMapPoint();
			}
			private function changeTextLong3(event:Event):void
			{
				const Long3:String = DegToDMS.formatDMStoDEG(new Number(long3.text), new Number(long3m.text),  new Number(long3s.text), longDir3.text);
				textW = Long3;
				refreshMapPoint();
			}
			private function changeTextLat4(event:Event):void
			{
				const Lat3:String = DegToDMS.formatDMStoDEG(new Number(lat3.text), new Number(lat3m.text), new Number(lat3s.text), latDir3.text);
				textN = Lat3;
				refreshMapPoint();
			}
			private function changeTextLong4(event:Event):void
			{
				const Long3:String = DegToDMS.formatDMStoDEG(new Number(long3.text), new Number(long3m.text),  new Number(long3s.text), longDir3.text);
				textW = Long3;
				refreshMapPoint();
			}
			
			private function activateDrawTool():void
			{
				//mapButton.selected = true;
				iconMarker.enabled = false;
				this.map.removeLayer(_oilMODEL);
				graphicsLayer.clear();
				myDrawTool.activate(DrawTool.MAPPOINT);
				map.addEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
			}
			private function drawEnd(event:DrawEvent):void
			{
				//mapButton.selected = false;
				iconMarker.enabled = true;
				map.removeEventListener(MouseEvent.MOUSE_MOVE, mouseMoveHandler);
				
				var geom:Geometry = event.graphic.geometry;
				var gra:Graphic = new Graphic(geom);
				gra.symbol = pms_by_url;
				gra.toolTip = "Scenario Location";  
				graphicsLayer.add(gra);
				
				myDrawTool.deactivate();
				setMapNavigation(null, null);
			}
			private function mouseMoveHandler(event:MouseEvent):void
			{	
				mouseClick = event;
				convertMapPoint();
			}
			private function refreshMapPoint(boolCenterMap:Boolean=true):void
			{
				if(textW.length>1&&textN.length>1)
				{
					graphicsLayer.clear();
					var newSpatialRef:SpatialReference=new SpatialReference(4326);
					var newMapPoint:MapPoint=new MapPoint(Number(textW),Number(textN),newSpatialRef);
					var newMapPointMercator:MapPoint=WebMercatorUtil.geographicToWebMercator(newMapPoint) as MapPoint;
					var gra:Graphic = new Graphic(newMapPointMercator as Geometry,pms_by_url);
					gra.toolTip = "Scenario Location";  
					graphicsLayer.add(gra);
					if(boolCenterMap)
					{
						//center map
						//map.centerAt(newMapPointMercator);
					}
				}
			}
			private function convertMapPoint():void
			{			
				if(mouseClick) 
				{
					var latlong:MapPoint = map.toMapFromStage(mouseClick.stageX, mouseClick.stageY);
					
					if(map.spatialReference.wkid == 102100 || map.spatialReference.wkid == 3857)
					{
						var wmll:MapPoint = WebMercatorUtil.webMercatorToGeographic(latlong) as MapPoint;
						latlong = wmll;
					}
					
					textN = latlong.y.toFixed(4);
					textW = latlong.x.toFixed(4);
					latlong_store = latlong;
					
					if (int(latlngChoice.selectedValue) == 2)
					{					
						const x3:String = DegToDMS.formatDEG(latlong_store.x, DegToDMS.LON);
						const y3:String = DegToDMS.formatDEG(latlong_store.y, DegToDMS.LAT);
						const x3m:String = DegToDMS.formatMIN(latlong_store.x, DegToDMS.LON);
						const y3m:String = DegToDMS.formatMIN(latlong_store.y, DegToDMS.LAT);
						const x3s:String = DegToDMS.formatSEC(latlong_store.x, DegToDMS.LON);
						const y3s:String = DegToDMS.formatSEC(latlong_store.y, DegToDMS.LAT);
						const x3Dir:String = DegToDMS.formatDIR(latlong_store.x, DegToDMS.LON);
						const y3Dir:String = DegToDMS.formatDIR(latlong_store.y, DegToDMS.LAT);
						
						lat3.text = Number(y3).toFixed(3);	
						long3.text = Number(x3).toFixed(3);	
						lat3m.text = Number(y3m).toFixed(3);		
						long3m.text = Number(x3m).toFixed(3);	
						lat3s.text = Number(y3s).toFixed(3);	
						long3s.text = Number(x3s).toFixed(3);	
						latDir3.text = Number(y3Dir).toFixed(3);	
						longDir3.text = Number(x3Dir).toFixed(3);	
					}
					else if (int(latlngChoice.selectedValue) == 1)
					{
						const x2:String = DegToDMS.formatDEG(latlong_store.x, DegToDMS.LON);
						const y2:String = DegToDMS.formatDEG(latlong_store.y, DegToDMS.LAT);
						const x2m:String = DegToDMS.formatMIN_MIN(latlong_store.x, DegToDMS.LON);
						const y2m:String = DegToDMS.formatMIN_MIN(latlong_store.y, DegToDMS.LAT);
						const x2Dir:String = DegToDMS.formatDIR(latlong_store.x, DegToDMS.LON);
						const y2Dir:String = DegToDMS.formatDIR(latlong_store.y, DegToDMS.LAT);
						
						lat2.text = Number(y2).toString();	
						long2.text = Number(x2).toString();	
						lat2m.text = Number(y2m).toFixed(3);	
						long2m.text = Number(x2m).toFixed(3);	
						//latDir2.text = Number(y2Dir).toFixed(3);	
						//longDir2.text = Number(x2Dir).toFixed(3);	
					}
					else if (int(latlngChoice.selectedValue) == 3)
					{
						var dubai84g:ProjProjection= new ProjProjection("EPSG:3997");
						var wgs84g:ProjProjection= new ProjProjection("EPSG:4326");
						var oldPoint:ProjPoint = new ProjPoint(latlong_store.x,latlong_store.y);
						var newPoint:ProjPoint=Proj4as.transform(wgs84g,dubai84g,oldPoint);
						
						lat4.text = newPoint.y.toFixed(3).toString();	
						long4.text = newPoint.x.toFixed(3).toString();
					}
					
					else if (int(latlngChoice.selectedValue) == 0)
					{
						if(Number(latlong_store.y.toFixed(10)) < 0) {
							latDir1.text = "S";
							latDir4.text = "S";
							latDir2.text = "S";
						} else {
							latDir1.text = "N";
							latDir4.text = "N";
							latDir2.text = "N";
						}
						
						if(Number(latlong_store.x.toFixed(10)) < 0) {
							longDir1.text = "W";
							longDir4.text = "W";
							longDir2.text = "W";
						} else {
							longDir1.text = "E";
							longDir4.text = "E";
							longDir2.text = "E";
						}
						
						lat1.text = String(Math.abs(Number(latlong_store.y.toFixed(3))));	
						long1.text = String(Math.abs(Number(latlong_store.x.toFixed(3))));
					}
				}
			}
			
			private function convertTextPoint():void
			{		
				var latlong:MapPoint = new MapPoint(Number(textW),Number(textN));
				
				//textN = latlong.y.toFixed(4);
				//textW = latlong.x.toFixed(4);
				latlong_store = latlong;
				
				if (int(latlngChoice.selectedValue) == 2)
				{					
					const x3:String = DegToDMS.formatDEG(latlong_store.x, DegToDMS.LON);
					const y3:String = DegToDMS.formatDEG(latlong_store.y, DegToDMS.LAT);
					const x3m:String = DegToDMS.formatMIN(latlong_store.x, DegToDMS.LON);
					const y3m:String = DegToDMS.formatMIN(latlong_store.y, DegToDMS.LAT);
					const x3s:String = DegToDMS.formatSEC(latlong_store.x, DegToDMS.LON);
					const y3s:String = DegToDMS.formatSEC(latlong_store.y, DegToDMS.LAT);
					const x3Dir:String = DegToDMS.formatDIR(latlong_store.x, DegToDMS.LON);
					const y3Dir:String = DegToDMS.formatDIR(latlong_store.y, DegToDMS.LAT);
					
					lat3.text = Number(y3).toFixed(3);	
					long3.text = Number(x3).toFixed(3);	
					lat3m.text = Number(y3m).toFixed(3);		
					long3m.text = Number(x3m).toFixed(3);	
					lat3s.text = Number(y3s).toFixed(3);	
					long3s.text = Number(x3s).toFixed(3);	
					latDir3.text = Number(y3Dir).toFixed(3);	
					longDir3.text = Number(x3Dir).toFixed(3);	
				}
				else if (int(latlngChoice.selectedValue) == 1)
				{
					const x2:String = DegToDMS.formatDEG(latlong_store.x, DegToDMS.LON);
					const y2:String = DegToDMS.formatDEG(latlong_store.y, DegToDMS.LAT);
					const x2m:String = DegToDMS.formatMIN_MIN(latlong_store.x, DegToDMS.LON);
					const y2m:String = DegToDMS.formatMIN_MIN(latlong_store.y, DegToDMS.LAT);
					const x2Dir:String = DegToDMS.formatDIR(latlong_store.x, DegToDMS.LON);
					const y2Dir:String = DegToDMS.formatDIR(latlong_store.y, DegToDMS.LAT);
					
					lat2.text = Number(y2).toString();	
					long2.text = Number(x2).toString();	
					lat2m.text = Number(y2m).toFixed(3);	
					long2m.text = Number(x2m).toFixed(3);	
					//latDir2.text = Number(y2Dir).toFixed(3);	
					//longDir2.text = Number(x2Dir).toFixed(3);	
				}
				else if (int(latlngChoice.selectedValue) == 3)
				{
					var dubai84g:ProjProjection= new ProjProjection("EPSG:3997");
					var wgs84g:ProjProjection= new ProjProjection("EPSG:4326");
					var oldPoint:ProjPoint = new ProjPoint(latlong_store.x,latlong_store.y);
					var newPoint:ProjPoint=Proj4as.transform(wgs84g,dubai84g,oldPoint);
					
					lat4.text = newPoint.y.toFixed(3).toString();	
					long4.text = newPoint.x.toFixed(3).toString();
				}
					
				else if (int(latlngChoice.selectedValue) == 0)
				{
					if(Number(latlong_store.y.toFixed(10)) < 0) {
						latDir1.text = "S";
						latDir4.text = "S";
						latDir2.text = "S";
					} else {
						latDir1.text = "N";
						latDir4.text = "N";
						latDir2.text = "N";
					}
					
					if(Number(latlong_store.x.toFixed(10)) < 0) {
						longDir1.text = "W";
						longDir4.text = "W";
						longDir2.text = "W";
					} else {
						longDir1.text = "E";
						longDir4.text = "E";
						longDir2.text = "E";
					}
					
					lat1.text = String(Math.abs(Number(latlong_store.y.toFixed(3))));	
					long1.text = String(Math.abs(Number(latlong_store.x.toFixed(3))));
				}
			}
			
			//Loads available records from database
			private function loadScenXML():void
			{
				wLoader.visible = true;
				var srvc:WebService = new WebService();
				srvc.useProxy = false;
				srvc.wsdl = _DataSource;
				//srvc.endpointURI = "http://staging.asascience.com/proxy/Proxy.ashx?u=" + _DataSource;
				
				ldpRuns = new ArrayCollection();
				
				if(srvc.canLoadWSDL())
				{		
					srvc.loadWSDL();
					srvc.GetScenariosByLocation.addEventListener("result", handleServiceResult);
					srvc.GetScenariosByLocation.addEventListener("fault", handleFaultEvent);
					srvc.GetScenariosByLocation(_key, _location);
					
					function handleServiceResult(evnt:ResultEvent):void
					{
						var strRslt:String = evnt.result as String;
						var xmlRslt:XML = new XML(strRslt);						
						var lens:XMLList=new XMLList(xmlRslt.Scenario); //just to get the length
						
						for(var i:uint=0; i <lens.length(); i++)
						{
							var startDate_data:String = new String((xmlRslt.child("Scenario"))[i].StartDate);
							var date_data:String = new String(startDate_data.charAt(5) + startDate_data.charAt(6) + "." +startDate_data.charAt(8) + startDate_data.charAt(9) + "." + startDate_data.charAt(0) + startDate_data.charAt(1) + startDate_data.charAt(2) + startDate_data.charAt(3)); 
							
							ldpRuns.addItem({ID:(xmlRslt.child("Scenario"))[i].ID,
							OilInfo_ID:(xmlRslt.child("Scenario"))[i].OilInfo_ID,
							Name:((xmlRslt.child("Scenario"))[i].CaseName),
							Date:(date_data),
							SimLength:(xmlRslt.child("Scenario"))[i].Duration});
						}
						ldpRuns.refresh();
						wLoader.visible = false;
					}
					function handleFaultEvent(event:Event):void {
						wLoader.visible = false;
					}
				}
			}
			
			private function deleteScenario(event:ListEvent):void
			{	
				var id:String = new String(event.currentTarget.selectedItem.ID);
				var oilid:String = new String(event.currentTarget.selectedItem.OilInfo_ID);
				Alert.show("Are you sure you want to delete?", "Alert",
                Alert.OK | Alert.CANCEL, this,
                alertListener, null,  Alert.OK );
				
				function alertListener(eventObj:CloseEvent):void {
					// Check to see if the OK button was pressed.
					if (eventObj.detail==Alert.OK) {
						
						var srvc:WebService = new WebService();
						srvc.useProxy = false;
						srvc.wsdl = _DataSource;
						
						if(srvc.canLoadWSDL())
						{		
							srvc.loadWSDL();
							srvc.addEventListener(FaultEvent.FAULT, handleServiceFaultD);
							srvc.DeleteScenario.addEventListener("result", handleServiceResultD); 
							srvc.DeleteScenario(_key, id, oilid);
							function handleServiceResultD(event:ResultEvent):void
							{
								loadScenXML();
							}
							function handleServiceFaultD(event:ResultEvent):void
							{
								//do nothing
							}
						}					}
				}
				/* 
				//Added Password protect for the delete
				var win:Login = PopUpManager.createPopUp(this, Login, true) as Login;
				win.showCloseButton = true;
				win.title = "Must be an Administrator!";
				PopUpManager.centerPopUp(win);
				
				win["okButton"].addEventListener("click",processLogin);
				
				function removeMe(event:Event):void {
					PopUpManager.removePopUp(win);
				}
				function processLogin(event:Event):void
				{	
					if(win.username.text == "" || win.password.text == "")
					{
						win.loginError.text = "Username and password are required.";
					}
					else if(win.username.text == adminText && win.password.text == passwordText)
					{
						removeMe(event);
						//if(event.detail == Alert.YES) {
							var srvc:WebService = new WebService();
							srvc.useProxy = false;
							srvc.wsdl = _DataSource;
							
							if(srvc.canLoadWSDL())
							{		
								srvc.loadWSDL();
								srvc.addEventListener(FaultEvent.FAULT, handleServiceFaultD);
								srvc.DeleteScenario.addEventListener("result", handleServiceResultD); 
								srvc.DeleteScenario(_key, id, oilid);
								function handleServiceResultD(event:ResultEvent):void
								{
									loadScenXML();
								}
								function handleServiceFaultD(event:ResultEvent):void
								{
									//do nothing
								}
							}
						}
					//}
					else
					{
						Alert.show("You do not have Permissions");
						removeMe(event);
					}
				} */
			}
			private function noload(event:ListEvent):void
			{
				//put here to disable doubleclick.  
				//This was causing a problem with drawing scenerio winds and currents
			}
			private function loadScenario(event:ListEvent):void
			{	
				counter = 5;
				save = true;
				
				_runWCcheck = true;
				
				var srvc:WebService = new WebService();
				srvc.useProxy = false;
				srvc.wsdl = _DataSource;
				
				if(srvc.canLoadWSDL())
				{		
					srvc.loadWSDL();
					srvc.addEventListener("fault", handleServiceFault);
					srvc.GetScenario.addEventListener("result", handleServiceResult); 
					srvc.GetScenario(_key, event.currentTarget.selectedItem.ID);

					function handleServiceResult(evnt:ResultEvent):void
					{
						var strRslt:String = evnt.result as String;
						LoadxmlRslt = new XML(strRslt);
						finishLoadScenario();
					}
					function handleServiceFault(evnt:Event):void
					{
						//do nothing
					}
				}
			}
			
			private function finishLoadScenario():void
			{
				response=new String(LoadxmlRslt.child("CaseName"));
				
				currentState="scenarios"
			 	scenariosStack.selectedIndex = 1;
				var latlongStoreY:Number = Number(new String(LoadxmlRslt.child("Lat")));
				var latlongStoreX:Number = Number(new String(LoadxmlRslt.child("Lon")));
				lat1.text = latlongStoreY.toString();
				long1.text = latlongStoreX.toString();
				
				var dubai84g:ProjProjection= new ProjProjection("EPSG:3997");
				var wgs84g:ProjProjection= new ProjProjection("EPSG:4326");
				var oldPoint:ProjPoint = new ProjPoint(latlongStoreX,latlongStoreY);
				var newPoint:ProjPoint=Proj4as.transform(wgs84g,dubai84g,oldPoint);
				
				textN = latlongStoreY.toString();
				textW = latlongStoreX.toString();
					const x3:String = DegToDMS.formatDEG(latlongStoreX, DegToDMS.LON);
					const y3:String = DegToDMS.formatDEG(latlongStoreY, DegToDMS.LAT);
					const x3m:String = DegToDMS.formatMIN(latlongStoreX, DegToDMS.LON);
					const y3m:String = DegToDMS.formatMIN(latlongStoreY, DegToDMS.LAT);
					const x3s:String = DegToDMS.formatSEC(latlongStoreX, DegToDMS.LON);
					const y3s:String = DegToDMS.formatSEC(latlongStoreY, DegToDMS.LAT);
					const x3Dir:String = DegToDMS.formatDIR(latlongStoreX, DegToDMS.LON);
					const y3Dir:String = DegToDMS.formatDIR(latlongStoreY, DegToDMS.LAT);
					//added by Xiaowen
					const x2m:String = DegToDMS.formatMIN_MIN(latlongStoreX, DegToDMS.LON);
					const y2m:String = DegToDMS.formatMIN_MIN(latlongStoreY, DegToDMS.LAT);
					
						lat3.text = y3;	
						long3.text = x3;
						lat3m.text = y3m;	
						long3m.text = x3m;
						lat3s.text = y3s;	
						long3s.text = x3s;
						latDir3.text = y3Dir;
						longDir3.text = x3Dir;	
						lat2.text = y3;	
						long2.text = x3;
						lat2m.text = y2m;	
						long2m.text = x2m;
						latDir2.text = y3Dir;
						longDir2.text = x3Dir;
						lat4.text = newPoint.y.toFixed(3).toString();
						long4.text = newPoint.x.toFixed(3).toString();
				
				currentState="spill"
				runname.text=new String(LoadxmlRslt.child("CaseName"));
				var startDateLoad:String = LoadxmlRslt.child("StartDate");
				
				var dateYear:int = new int(new String(startDateLoad.charAt(0) + startDateLoad.charAt(1) + startDateLoad.charAt(2) + startDateLoad.charAt(3))); 
				var dateMonth:int = (new int(startDateLoad.charAt(5) + startDateLoad.charAt(6)) - 1);
				var dateDay:int = new int(new String(startDateLoad.charAt(8) + startDateLoad.charAt(9)));
				var dateHours:int = new int(new String(startDateLoad.charAt(11) + startDateLoad.charAt(12)));
				trace(dateHours);
				//add by Xiaowen,Transfer to local time
				var scenarioDate:Date=new Date();
				var timeDifference:Number=_timeZone-(-scenarioDate.getTimezoneOffset()/60);
				scenarioDate.setUTCFullYear(dateYear,dateMonth,dateDay);
				scenarioDate.setUTCHours(dateHours,0,0,0);
				//convert scenario date to customized time zone
				scenarioDate.hours+=int(timeDifference);
				scenarioDate.minutes+=((timeDifference%1)*60);
				
				startSpill.dateASA.selectedDate=scenarioDate;
				startSpill.hours.value = scenarioDate.hours;
				startSpill.handleChange();
				
				setDates();
								
				simlength.value=new Number(LoadxmlRslt.child("Duration"));
				waterTempF = new Number(LoadxmlRslt.child("WaterTemp"));
				waterTempC = ((waterTempF - 32) / 1.8);
				waterTemp.value=waterTempC;
				
				_loadLocation=LoadxmlRslt.child("Location");
				_path=LoadxmlRslt.child("Path");

				volume.text = new String((LoadxmlRslt.child("OilInfo")).Amount);
				var unit_check:String = new String((LoadxmlRslt.child("OilInfo")).AmountUnits);
				var unit_index:int;
				
				if(unit_check=="Liters")
				{
					unit_index=0;
				}
				else if(unit_check=="Gallons")
				{
					unit_index=1;
				}
				else if(unit_check=="Cubic Meters")
				{
					unit_index=2;
				}
				else if(unit_check=="Tonnes")
				{
					unit_index=3;
				}
				else if(unit_check=="Barrels")
				{
					unit_index=4;
				}
				else if(unit_check=="Pounds")
				{
					unit_index=5;
				}
				else if(unit_check=="Kilograms")
				{
					unit_index=6;
				}
				
				AmtType.selectedIndex=unit_index;
				
				var type_check:String = new String((LoadxmlRslt.child("OilInfo")).OilType);
				var type_index:int;
				
				if(type_check=="DIESEL")
				{
					type_index=0;
				}
				else if(type_check=="LIGHT CRUDE OIL")
				{
					type_index=1;
				}
				else if(type_check=="MEDIUM CRUDE OIL")
				{
					type_index=2;
				}
				else if(type_check=="HEAVY CRUDE OIL")
				{
					type_index=3;
				}
				else if(type_check=="PRUDHOE BAY CRUDE")
				{
					type_index=4;
				}
				else if(type_check=="BUNKER C FUEL OIL %236")
				{
					type_index=5;
				}
				else if(type_check=="JP-4(FUEL OIL No. 1)")
				{
					type_index=6;
				}
				else if(type_check=="DIESEL FUEL OIL")
				{
					type_index=7;
				}
				else if(type_check=="GASOLINE (LEADED)")
				{
					type_index=8;
				}
				else if(type_check=="GASOLINE (UNLDEADED)")
				{
					type_index=9;
				}
				else if(type_check=="JET FUEL A-1")
				{
					type_index=10;
				}
				else if(type_check=="MARINE DIESEL FUEL")
				{
					type_index=11;
				}
				SpillType.selectedIndex=type_index;
				durSpill.value=new int((LoadxmlRslt.child("OilInfo")).ReleaseDuration);
				
				currentState="winds";
		//**These indexes need to be match the indexes in the dropdown menu 
				winds_.dataProvider = windlayArrCol;
				if((LoadxmlRslt.child("Environments")).Environment[0].EnvType[0] == "-999")
				{
					winds_.selectedIndex=2;
					windtype = "None";
					windID = (LoadxmlRslt.child("Environments")).Environment[0].EnvType[0];
				}
				else if((LoadxmlRslt.child("Environments")).Environment[0].EnvType[0] == "-1")
				{
					winds_.selectedIndex=1;
					windID = (LoadxmlRslt.child("Environments")).Environment[0].EnvType[0];

					windsSpeed.text = Math.round(Number((LoadxmlRslt.child("Environments")).Environment[0].Speed[0])).toString();
					windsSpeedChangeHandler();
					var windsDir_load:String = (LoadxmlRslt.child("Environments")).Environment[0].Direction[0];
					var windsDir_ind:int;
					if(windsDir_load == "N")
					{
						windsDir_ind = 0;
					}
					else if(windsDir_load == "NNE")
					{
						windsDir_ind = 1;
					}
					else if(windsDir_load == "NE")
					{
						windsDir_ind = 2;
					}
					else if(windsDir_load == "NEE")
					{
						windsDir_ind = 3;
					}
					else if(windsDir_load == "E")
					{
						windsDir_ind = 4;
					}
					else if(windsDir_load == "SEE")
					{
						windsDir_ind = 5;	
					}
					else if(windsDir_load == "SE")
					{
						windsDir_ind = 6;
					}
					else if(windsDir_load == "SSE")
					{
						windsDir_ind = 7;
					}
					else if(windsDir_load == "S")
					{
						windsDir_ind = 8;
					}
					else if(windsDir_load == "SSW")
					{
						windsDir_ind = 9;	
					}
					else if(windsDir_load == "SW")
					{
						windsDir_ind = 10;
					}
					else if(windsDir_load == "SWW")
					{
						windsDir_ind = 11;
					}
					else if(windsDir_load == "W")
					{
						windsDir_ind = 12;
					}
					else if(windsDir_load == "NWW")
					{
						windsDir_ind = 13;
					}
					else if(windsDir_load == "NW")
					{
						windsDir_ind = 14;
					}
					else if(windsDir_load == "NNW")
					{
						windsDir_ind = 15;
					}
					windsDir.selectedIndex = windsDir_ind;
					sourceChangeWinds();
					windtype = "Manual";
				}
				else if((LoadxmlRslt.child("Environments")).Environment[0].EnvType[0] == "-2")
				{
					winds_.selectedIndex=0;
					windID = (LoadxmlRslt.child("Environments")).Environment[0].EnvType[0];
					sourceChangeWinds();
					windtype = "Name: Dubai WRF Winds";
				} 
				else {
					//find EDS
					winds_.selectedIndex=0;
					windID = (LoadxmlRslt.child("Environments")).Environment[0].EnvType[0];
					lastWinds = windID = (LoadxmlRslt.child("Environments")).Environment[0].EnvType[0];	
					sourceChangeWinds();
					windtype = "Name: Dubai WRF Winds";
				}
				
				currentState="currents";
		//*******These indexes need to be match the indexes in the dropdown menu
				currents_.dataProvider = currlayArrCol;
				if((LoadxmlRslt.child("Environments")).Environment[1].EnvType == "-999")
				{
					currents_.selectedIndex=2;
					curID = (LoadxmlRslt.child("Environments")).Environment[1].EnvType;
					curtype = "None";
				}
				else if((LoadxmlRslt.child("Environments")).Environment[1].EnvType == "-1")
				{
					currents_.selectedIndex=1;
					curtype = "Manual";
					currentsSpeedType.selectedIndex=0;
					
					curID = (LoadxmlRslt.child("Environments")).Environment[1].EnvType;
					
					currentsSpeed.text = Math.round(Number((LoadxmlRslt.child("Environments")).Environment[1].Speed)).toString();
					currentsSpeedChangeHandler();
					var currentsDir_load:String = (LoadxmlRslt.child("Environments")).Environment[1].Direction;
					var currentsDir_ind:int;
					if(currentsDir_load == "N")
					{
						currentsDir_ind = 0;
					}
					else if(currentsDir_load == "NNE")
					{
						currentsDir_ind = 1;
					}
					else if(currentsDir_load == "NE")
					{
						currentsDir_ind = 2;
					}
					else if(currentsDir_load == "NEE")
					{
						currentsDir_ind = 3;
					}
					else if(currentsDir_load == "E")
					{
						currentsDir_ind = 4;
					}
					else if(currentsDir_load == "SEE")
					{
						currentsDir_ind = 5;	
					}
					else if(currentsDir_load == "SE")
					{
						currentsDir_ind = 6;
					}
					else if(currentsDir_load == "SSE")
					{
						currentsDir_ind = 7;
					}
					else if(currentsDir_load == "S")
					{
						currentsDir_ind = 8;
					}
					else if(currentsDir_load == "SSW")
					{
						currentsDir_ind = 9;	
					}
					else if(currentsDir_load == "SW")
					{
						currentsDir_ind = 10;
					}
					else if(currentsDir_load == "SWW")
					{
						currentsDir_ind = 11;
					}
					else if(currentsDir_load == "W")
					{
						currentsDir_ind = 12;
					}
					else if(currentsDir_load == "NWW")
					{
						currentsDir_ind = 13;
					}
					else if(currentsDir_load == "NW")
					{
						currentsDir_ind = 14;
					}
					else if(currentsDir_load == "NNW")
					{
						currentsDir_ind = 15;
					}
					currentsDir.selectedIndex = currentsDir_ind;
					sourceChangeCurrents();
					currentsSpeedChangeHandler();
				}
				else if((LoadxmlRslt.child("Environments")).Environment[1].EnvType == "0")
				{
					currents_.selectedIndex=0;
					curID = (LoadxmlRslt.child("Environments")).Environment[1].EnvType;
					sourceChangeCurrents();
					curtype = "Name: Arabian Dubai Currents";
				} 
				/* For Local:::
				else if((LoadxmlRslt.child("Environments")).Environment[1].EnvType == "-2")
				{
					currents_.selectedIndex=2;
					sourceChangeCurrents();
					curID = (LoadxmlRslt.child("Environments")).Environment[1].EnvType;
				} */ 
				else {
					//find EDS
					currents_.selectedIndex = 0;
					curID = (LoadxmlRslt.child("Environments")).Environment[1].EnvType[0];
					lastCurrents = curID = (LoadxmlRslt.child("Environments")).Environment[1].EnvType[0];
					sourceChangeCurrents();		
					curtype = "Name: Arabian Dubai Currents";
				}
				
				currentState = "review";
								
				runOilModel();
				//add the jump code by Xiaowen
				if(!((getGeoExtent()[0]<latlongStoreY&&latlongStoreY<getGeoExtent()[1])&&(getGeoExtent()[2]<latlongStoreX&&latlongStoreX<getGeoExtent()[3])))
				{
					Alert.show(ResourceManager.getInstance().getString('OilSpill','zoomTip1')+ResourceManager.getInstance().getString('OilSpill','zoomTip2'),
						ResourceManager.getInstance().getString('OilSpill','zoomTitle'),
								Alert.YES|Alert.NO,this,zoomAlertHandler);
					function zoomAlertHandler(event:CloseEvent):void
					{
						if(event.detail == Alert.YES)
						{
							var geoRef:SpatialReference=new SpatialReference(4326);
							var centerGeoPoint:MapPoint=new MapPoint(latlongStoreX,latlongStoreY,geoRef);
							var centerMercator:MapPoint=WebMercatorUtil.geographicToWebMercator(centerGeoPoint) as MapPoint;
							map.centerAt(centerMercator);
						}
					}
				}
				/* oilWarningLayer.visible = true;
				oilWarningLayerCheck.selected = true; */
				
				strtDateText.text = scenarioDate.toString();
			}
			
			private function saveScenario():void
			{				
				var windSP_save:String = "";
				var windsDR_save:String = "";
				
				if(windID == -1)
				{
				    windSP_save = windSP;
					windsDR_save = windsDir.selectedItem.label;
				}
				
				var curSP_save:String = "";
				var curDR_save:String = "";
				
				if(curID == -1)
				{
					curSP_save = curSP;
					curDR_save = currentsDir.selectedItem.label;
				}
				
				//String to send to database for Save Scenario
				var SaveString:String = 
						"<Scenario>" + 
						"<CaseName>" + response + "</CaseName>" +
						"<StartDate>" + DateTimeUtilities.spillServiceDateWithTimeZone2UTC(_startDate,_timeZone) + "</StartDate>" +
						"<Duration>" + simlength.value.toString() + "</Duration>" +
						"<Lat>" + textN + "</Lat>" +
						"<Lon>" + textW + "</Lon>" +
						//"<OilInfo_ID></OilInfo_ID>" +
						"<ModelStep>" + modelTimeStep.selectedItem.data.toString() + "</ModelStep>" +
						"<OutputInterval>" + outputTimeInterval.selectedItem.data.toString() + "</OutputInterval>" +
						"<WaterTemp>" + waterTempF.toString() + "</WaterTemp>" +
						"<Path>" + _path + "</Path>" +
						"<Location>" + _location + "</Location>" +
						"<Environments>" +
							"<Environment>" +
								//"<ID></ID>" +
								"<SourceName>" + winds_.selectedItem.label + "</SourceName>" +
								"<Type>W</Type>" +
								"<ScenarioID></ScenarioID>" +
								"<Speed>" + windSP_save + "</Speed>" +
								"<Direction>" + windsDR_save + "</Direction>" +
								"<EnvType>" + windID + "</EnvType>" +
							"</Environment>" +
							"<Environment>" +
								//"<ID></ID>" +
								"<SourceName>" + currents_.selectedItem.label + "</SourceName>" +
								"<Type>C</Type>" +
								"<ScenarioID></ScenarioID>" +
								"<Speed>" + curSP_save + "</Speed>" +
								"<Direction>" + curDR_save + "</Direction>" +
								"<EnvType>" + curID + "</EnvType>" +
							"</Environment>" +
						"</Environments>" +
						"<OilInfo>"+	
							"<OilType>" + SpillType.selectedItem.data + "</OilType>" +
							"<Amount>" + volume.text + "</Amount>" +
							"<ReleaseDuration>" + durSpill.value.toString() + "</ReleaseDuration>" +
							"<AmountUnits>" + AmtType.selectedItem.label + "</AmountUnits>" +
						"</OilInfo></Scenario>";
				
				var srvc:WebService = new WebService();
				srvc.useProxy = false;
				srvc.wsdl = _DataSource;
				
				if(srvc.canLoadWSDL())
				{		
					srvc.loadWSDL();
					srvc.addEventListener("fault", handleServiceFault);
					srvc.CreateScenario.addEventListener("result", handleServiceResult);
					
					srvc.CreateScenario(_key, SaveString);
					function handleServiceResult(event:ResultEvent):void
					{
						var strRslt:String = event.result as String;
						LoadxmlRslt = new XML(strRslt);
					}
					function handleServiceFault(evnt:FaultEvent):void
					{
						//do nothing
					}
				}
			}						
			private function setDates():void 
			{
				_startDate = startSpill.dateASA.selectedDate;
				_startDate.hours = startSpill.hours.value;
				
				_startDate.minutes = 0;
				_startDate.seconds = 0;
				_startDate.milliseconds = 0;
				ViewerContainer.dispatchEvent(new AppEvent(AppEvent.START_DATE_CHANGED, new String(_startDate)));
				ViewerContainer.dispatchEvent(new AppEvent(AppEvent.TIME_SLIDER_TIME_CHANGED, _startDate));
				
				if(simlength)
				{
					_endDate.setTime(_startDate.getTime() + (simlength.value * (60*60*1000)));
				}
				else{
					_endDate.setTime(_startDate.getTime() + (24 * (60*60*1000)));
				}
				ViewerContainer.dispatchEvent(new AppEvent(AppEvent.END_DATE_CHANGED, new String(_endDate)));
				var today:Date = new Date;
				
				//two months back limit 4 days from today limit
				if(today.getTime() >(startSpill.dateASA.selectedDate.getTime()+1000 * 60 * 60 * 24 * 60)||_endDate.getTime()> today.getTime()+1000 * 60 * 60*24*3)
				{
					toEarly = true;
				}
				else{
					toEarly = false;
				}
				if(toEarly == true)
				{
					sourceSelectedIndex = 2;
					if(forecastUsed == true)
					{
						if(strtDateText)
						{
							strtDateText.visible = false;	
						}
					}
				}
			}
		//REVIEW PANEL FUNCTIONS
			private function checkRun():void 
			{
				_runCheck = false;
				if(runname.text == "") 
				{
					Alert.show("Please enter a casename");
				} else {
					runSpillModel();
				}
			}
			private function runSpillModel() : void 
			{	
				loader.visible=true;
				//will remove preious oil model if there is a model already loaded
				if(_oilMODEL)
				{
					this.map.removeLayer(_oilMODEL);
					_oilMODEL.visible = false;
				}
				if(_oilMODELW)
				{
					this.map.removeLayer(_oilMODELW);
				}
				if(_oilMODELC)
				{
					this.map.removeLayer(_oilMODELC);
				}
				//generate booms and overflights XML string
				refreshHashTable();
				getFeaturesFromHashTable();
				if(boomsCol!=null||overflightsCol!=null)
				{
					generateFeaturesXML();
				}
				
				setDates();
				
				var casename:String = runname.text;
				casename += "_" + Math.floor((Math.random()*10)).toString();
				runname.text = casename;
				
				var urlRUN:String = _OilStringSource + "?";
				urlRUN += "CaseName="+casename+"&";
				urlRUN += "ClientKey="+_key+"&";
				urlRUN += "ModelType="+_modelType+"&";
				urlRUN += "StartDate="+DateTimeUtilities.spillServiceDateWithTimeZone2UTC(_startDate,_timeZone)+"&";
				urlRUN += "EndDate="+DateTimeUtilities.spillServiceDateWithTimeZone2UTC(_endDate,_timeZone)+"&";
				urlRUN += "simLength="+simlength.value+"&";
				urlRUN += "WaterTemp="+new String(waterTempF)+"F&";
				urlRUN += "IncLat="+textN+"&";
				urlRUN += "IncLon="+textW+"&";
				urlRUN += "Winds="+windID+"&";
				
		//Added to fix new webservice
				urlRUN += "AddToDatabase=false&";
				
				urlRUN += "Currents="+curID+"&";
				//Only uses these variables on Manual Winds Selection
				if(windID == -1)
				{
					//urlRUN += "EcopWinds="+"GFS_winds"+"&";
					urlRUN += "WindMag="+ windSP +"&";
					urlRUN += "WindDir="+ windsDR +"&";
				}
				//Only uses these variables on Manual Currents Selection
				if(curID == -1)
				{
					//urlRUN += "EcopCurrents="+"NCOM_currents"+"&";
					urlRUN += "CurrMag="+ curSP +"&";
					urlRUN += "CurrDir="+ curDR +"&";
				}
				urlRUN += "ChemId=NONE&";
				urlRUN += "FullPath=true&";
				urlRUN += "River="+"false&";
				urlRUN += "OilType="+SpillType.selectedItem.data+"&";
				urlRUN += "OilUnits="+(AmtType.selectedIndex+1).toString()+"&";
				urlRUN += "Duration="+durSpill.value+"&";
				urlRUN += "Location="+_location + "&";
				urlRUN += "Volume="+volume.text + "&";
				urlRUN += "ModelStep="+modelTimeStep.selectedItem.data.toString()+"&";
				urlRUN += "OutputInterval="+outputTimeInterval.selectedItem.data.toString();

				var serviceLoader:URLLoader = new URLLoader(new URLRequest(urlRUN));
				serviceLoader.addEventListener(Event.COMPLETE, serviceResponse);
				serviceLoader.addEventListener(IOErrorEvent.IO_ERROR, serviceError);
			}			
			private function serviceResponse(e:Event) : void 
			{
				this.map.dispatchEvent(new SpillEvent(SpillEvent.MODEL_COMPLETE, "oil"));
				
				_path = e.currentTarget.data;				
				response = e.currentTarget.data;
				
				if (response.substr(0,100).search("ERROR") != -1) {
					if (response.substr(0,100).search("Error: 11") != -1) {
						var s0:String = new String(e.currentTarget.data);
						response = s0.substring(s0.search("Outdata")+String("Outdata").length+1,s0.search(".INP"));
						runSpillModel();
					} else {
						Alert.show(response.split("ERROR:")[1]);
					}
				} else {
					var s:String = new String(e.currentTarget.data);
					response = s.substring(s.search("Outdata")+String("Outdata").length+1,s.search(".INP"));
					save=false;
					//spillTitle.text = response;
					if(response.search("land")>5)
					{
						showLayers();
						spillTitle.setStyle("color","red");
					}
					else{
						runOilModel();
						showLayers();
						spillTitle.setStyle("color","0x58595b");
					}
				}
				loader.visible = false;
			}
			
			private function runOilModel():void
			{
				//will remove preious oil model if there is a model already loaded
				if(_oilMODEL)
				{
					map.removeLayer(_oilMODEL);
					_oilMODEL.visible = false;
				}
				if(_oilMODELW)
				{
					map.removeLayer(_oilMODELW);
					_oilMODELW.visible = false;
				}
				if(_oilMODELC)
				{
					map.removeLayer(_oilMODELC);
					_oilMODELC.visible = false;
				}
				
				setDates();
				
				currentState = "layers";
				showLayers();
				trackline.selected = true;
				contour.selected = true;
				mass.selected = true;
				spillets.selected = true;
				swept.selected = true;
				winds.selected = true;
				curnts.selected = true;
				
				if(_runCheck == false)
				{
					_oilMODEL = new WMSModel(_OilModelSource, "OILMAP_ALL", _path, DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_startDate,_timeZone), trackline.selected, contour.selected, spillets.selected, mass.selected, swept.selected, _key);
					_oilMODEL.name="OilModel";
					_oilMODEL.id="OilModel";
					_oilMODEL.visible=true;
					map.addLayer(_oilMODEL); 
				}
				
				updateMapLayersWin();
				updateMapLayersCur();
								
				var oilData:Array = new Array;
				oilData.push(_path);
				oilData.push(response);
				oilData.push(_currentTime);
				if(winds_.selectedItem.data == "EDS"|| winds_.selectedItem.label == "Forecast Data")
				{
					oilData.push(windTitle);
				}
				else
				{
					oilData.push("NONE");
				}
				if(currents_.selectedItem.data == "EDS"|| currents_.selectedItem.label == "Forecast Data")
				{
					oilData.push(curTitle);
				}
				else
				{
					oilData.push("NONE");
				}
				
				//ViewerContainer.dispatchEvent(new AppEvent(AppEvent.MODEL_LOAD_COMPLETE, oilData));
				
				//SAW final flag in order for time slider to run model
				_runCheck = true;
				
				graphicsLayer.clear();
				map.reorderLayer("OilModel",12);
				
				//SAW saves scenario
				if(save == false)
				{
					loader.visible=false;
					saveScenario();
				}
				/* oilWarningLayer.visible = true;
				oilWarningLayerCheck.selected = true; */
			}
			private function serviceError(e:IOErrorEvent) : void 
			{
				this.map.dispatchEvent(new SpillEvent(SpillEvent.MODEL_ERROR, "oil"));
				Alert.show(e.text.toString());
				loader.visible = false;
			}
			
			//PROPERTIES FUNCTIONS,update by Xiaowen
			public function updateMapTime(event:AppEvent):void
			{	
				_currentTime = event.data as Date;
				
				if(_oilMODEL)
				{
					updateMapLayers();
					updateMapLayersWin();
					updateMapLayersCur();
				}
			}
			
			//
			//Longwinded but these two functions check to make sure Winds/Current files are being loaded and view with timeslider
			//Should be re-written
			public  function updateMapLayersWin():void
			{
				winds_.dataProvider = windlayArrCol;
				if(winds_.selectedItem.label == "NOWCASTING" || winds_.selectedItem.label == "EDS"|| winds_.selectedItem.label == "Forecast Data")
				{	
					if(winds.visible == false)
					{
						ecopLegendOption.addElement(windsLegendIcon);
					}
					winds.visible = true;
					//if(_runCheck == true)
					if(_oilMODELW)
					{
						if(_oilMODELW.visible && winds.selected == true)
						{	
							_oilMODELW.params.time = DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_currentTime,_timeZone);
							_oilMODELW.visible = true;
							_oilMODELW.refresh();
						} 
						else if(winds.selected == false)
						{
							_oilMODELW.visible = false;
							_oilMODELW.refresh();	
						} 
						else{
							_oilMODELW = new WMSEDSModel(_edsEcopModelSource, windTitle, DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_startDate,_timeZone));
							
							//_oilMODELW.name="OilModelCurrents";
							_oilMODELW.name="wmsLayer";
							_oilMODELW.id = windTitle;
							
							_oilMODELW.visible=true;
							this.map.addLayer(_oilMODELW); 
						}
					}
					else{
						_oilMODELW = new WMSEDSModel(_edsEcopModelSource, windTitle, DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_startDate,_timeZone));
						
						//_oilMODELW.name="OilModelCurrents";
						_oilMODELW.name="wmsLayer";
						_oilMODELW.id = windTitle;
						
						_oilMODELW.visible=true;
						this.map.addLayer(_oilMODELW); 
					}
				}
				else
				{
					for (var i:int = 0; i < ecopLegendOption.numElements; i++)
					{
						if (ecopLegendOption.getElementAt(i) == windsLegendIcon)
						{
							ecopLegendOption.removeElement(windsLegendIcon);
						}
					}
					winds.visible = false;
				}
			}
			public  function updateMapLayersCur():void
			{
				currents_.dataProvider = currlayArrCol;
				if(currents_.selectedItem.label == "EDS"|| currents_.selectedItem.label == "Forecast Data")
				{
					if(curnts.visible == false)
					{
						ecopLegendOption.addElement(currentsLegendIcon);
					}
					
					curnts.visible = true;
					//if(_runCheck == true)
					if(_oilMODELC)
					{
						if(_oilMODELC.visible && curnts.selected == true)
						{	
							_oilMODELC._params.time = DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_currentTime,_timeZone);
							_oilMODELC.visible = true;
							_oilMODELC.refresh();
						} 
						else if(curnts.selected == false)
						{
							_oilMODELC.visible = false;
							_oilMODELC.refresh();
						}
						else{
							_oilMODELC = new WMSEDSModel(_edsEcopModelSource, curTitle, DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_startDate,_timeZone));
							
							//_oilMODELC.name="OilModelCurrents";
							_oilMODELC.name="wmsLayer";
							_oilMODELC.id = curTitle;
							_oilMODELC.visible=true;
							this.map.addLayer(_oilMODELC); 
						}
					}
					else{
						_oilMODELC = new WMSEDSModel(_edsEcopModelSource, curTitle, DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_startDate,_timeZone));
						
						//_oilMODELC.name="OilModelCurrents";
						_oilMODELC.name="wmsLayer";
						_oilMODELC.id = curTitle;
						_oilMODELC.visible=true;
						this.map.addLayer(_oilMODELC);
					}
				}
				else
				{
					for (var i:int = 0; i < ecopLegendOption.numElements; i++)
					{
						if (ecopLegendOption.getElementAt(i) == currentsLegendIcon)
						{
							ecopLegendOption.removeElement(currentsLegendIcon);
						}
					}
					curnts.visible = false;
				}
			}
			public function updateMapLayers():void
			{	
				if(_runCheck == true)
				{
					if(map.getLayer("OilModel"))
					{					
						_oilMODEL._params.time = DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_currentTime,_timeZone);
						_oilMODEL._params.OM_TRACKLINE = trackline.selected;
						_oilMODEL._params.OM_CONTOUR = contour.selected;
						_oilMODEL._params.OM_SPILLETS = spillets.selected;
						_oilMODEL._params.OM_MASS = mass.selected;
						_oilMODEL._params.OM_SWEPT = swept.selected;
						_oilMODEL.visible = true;
						_oilMODEL.refresh();
	
					} else {
						_oilMODEL = new WMSModel(_OilModelSource, "OILMAP_ALL", _path, DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_startDate,_timeZone), trackline.selected, contour.selected, spillets.selected, mass.selected, swept.selected, _key);
						_oilMODEL.name="OilModel";
						_oilMODEL.id="OilModel";
						_oilMODEL.visible=true;
						map.addLayer(_oilMODEL);
					}
				}
			}
			//update currents layer
			/* public function changeCurrentsStyle(event:AppEvent):void
			{
				if(_currentsNcomMODEL.visible==true)
				{
					_currentsNcomMODEL._params.styles=event.data.toString();
					updateEDSCurrentsLayer();
				}
			}
			public function updateEDSCurrentsLayer():void
			{	
				if(_currentsNcomMODEL.visible==true)
				{
					_currentsNcomMODEL._params.time = DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_currentTime,_timeZone);
					
					_currentsNcomMODEL.refresh();
				}  
			}
			//update winds layer
			public function changeWindsStyle(event:AppEvent):void
			{
				if(_windsMODEL.visible==true)
				{
					_windsMODEL._params.styles=event.data.toString();
					updateEDSWindsLayer();
				}
				else
				{
				    //do nothing
				}
				
			}
			public function updateEDSWindsLayer():void
			{	
				if(_windsMODEL.visible==true)
				{
					trace("existing");
					trace(_currentTime);
					trace(DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_currentTime,_timeZone));
					
					_windsMODEL._params.time = DateTimeUtilities.spillHyphenServiceDateWithTimeZone2UTC(_currentTime,_timeZone);
					_windsMODEL.refresh();
				} 
			} */
			
			protected function waterTempChangeHandler():void
			{
				if(tempType.selectedIndex == 0)
				{
					waterTempC = new Number(waterTemp.value);
					waterTempF = ((waterTempC * 1.8) + 32);
				}
				else if(tempType.selectedIndex == 1)
				{
					waterTempF = new Number(waterTemp.value);
					waterTempC = ((waterTempF - 32) / 1.8);
				}
			}

			protected function tempTypeChangeHandler(event:IndexChangeEvent):void
			{
				if(tempType.selectedIndex == 0)
				{
					waterTempC = ((waterTempF - 32) / 1.8);
					waterTemp.value = new Number(waterTempC);
				}
				else if(tempType.selectedIndex == 1)
				{
					waterTempF = ((waterTempC * 1.8) + 32);
					waterTemp.value = new Number(waterTempF);
				}
			}
			private function sourceChangeWinds():void
			{
				winds_.dataProvider = windlayArrCol;
				forecastUsed = false;
				if(winds_.selectedItem.data == "NONE")
				{
					windID = -999;
					windSP = "";
					windsDR = "";
					//add by Xiaowen
					_windsType="NONE";
					
					windtype = winds_.selectedItem.label;
				}
				else if (winds_.selectedItem.data == "MANUAL")
				{
					windID = -1;
					windSP = new String(windSPTypeKn);
					windsDR = new String(windsDir.selectedItem.label);
					forecastUsed = false;
					windtype = winds_.selectedItem.label;
					//add by Xiaowen
					_windsType="MANUAL";
					if(windsmanual == false)
					{
						manualWindsRows=new ArrayCollection();
						var manualWindsDate:Date=new Date(startSpill.dateASA.selectedDate.fullYear,startSpill.dateASA.selectedDate.month,startSpill.dateASA.selectedDate.date,startSpill.hours.value);
						var computerTimeZone:Number=-manualWindsDate.getTimezoneOffset()/60;
						var timeDifference:Number=_timeZone-computerTimeZone;
						var computerManualWindsDate:Date=new Date(manualWindsDate);
						computerManualWindsDate.hours-=int(timeDifference);
						computerManualWindsDate.minutes-=((timeDifference%1)*60);
						for(var i:int=0;i<simlength.value;i++)
						{
							var timeString:String=manualWindsDate.fullYear.toString();
							timeString=timeString+((manualWindsDate.month+1).toString().length==1?"0"+(manualWindsDate.month+1).toString():(manualWindsDate.month+1).toString());
							timeString=timeString+(manualWindsDate.date.toString().length==1?"0"+manualWindsDate.date.toString():manualWindsDate.date.toString());
							timeString+="T";
							timeString=timeString+(manualWindsDate.hours.toString().length==1?"0"+manualWindsDate.hours.toString():manualWindsDate.hours.toString());
							timeString+="00";
							var timeUTCString:String=computerManualWindsDate.fullYearUTC.toString();
							timeUTCString=timeUTCString+((computerManualWindsDate.monthUTC+1).toString().length==1?"0"+(computerManualWindsDate.monthUTC+1).toString():(computerManualWindsDate.monthUTC+1).toString());
							timeUTCString=timeUTCString+(computerManualWindsDate.dateUTC.toString().length==1?"0"+computerManualWindsDate.dateUTC.toString():computerManualWindsDate.dateUTC.toString());
							timeUTCString+="T";
							timeUTCString=timeUTCString+(computerManualWindsDate.hoursUTC.toString().length==1?"0"+computerManualWindsDate.hoursUTC.toString():computerManualWindsDate.hoursUTC.toString());
							timeUTCString+="00";
							manualWindsRows.addItem({Time:timeString,TimeUTC:timeUTCString,Rate:"0",Direction:"0"});
							
							manualWindsDate.hours+=1;
							computerManualWindsDate.hours+=1;
						}
						windsmanual = true;
					}
				}
				else if (winds_.selectedItem.data == "NOWCASTING")
				{
					windID = -2;
					windSP = "";
					windsDR = "";
					forecastUsed = true;
				} 
				else if(winds_.selectedItem.data == "EDS"||winds_.selectedItem.data == "Forecast Data") 
				{
					metaNameW.text = "";
					metaIDW.text = "";
					metaBBOXW.text = "";
					metaDateW.text = "";
					selectedSourceWinds.text="";
					//windValid=false;
					getWindsCatalog();
					forecastUsed = true;
				}
			}
			private function getWindsCatalog():void
			{			
				windsLoader.visible=true;
				
				var urlRUN:String = _edsSource + "?";
				urlRUN += "SubCode="+_key+"&";
				urlRUN += "DataType=winds&";
				urlRUN += "bbox="+getGeoExtent()[2]+","+getGeoExtent()[0]+","+getGeoExtent()[3]+","+getGeoExtent()[1];
				
				var serviceLoader:URLLoader = new URLLoader(new URLRequest(urlRUN));
				serviceLoader.addEventListener(Event.COMPLETE, windsResponse);
				serviceLoader.addEventListener(IOErrorEvent.IO_ERROR, serviceError);
				
				function windsResponse(e:Event) : void 
				{  
					var sxml:XML = new XML(e.currentTarget.data);
					var datasets:XMLList = new XMLList(sxml.dataset);
					
					var count:uint = datasets.length();
					windsDP = new ArrayCollection();
					var item:XML;
					for each(item in datasets) {
						//exclude GFS which periodically is returned
						//if(String(item.@description).search("Global")==-1)
						//{
							windsDP.addItem({label:item.@description, id:item.@wmslayeridstr, bbox:item.@extentleft + "," + item.@extentbottom + "," + item.@extentright + "," + item.@extenttop, 
								edsid:item.@id, dateRange:DateTimeUtilities.DBStringDateToStringDate(item.@starttime) + " - " + DateTimeUtilities.DBStringDateToStringDate(item.@endtime)});
						//}
					}
					
					windsList_.visible=true;
					for(var j:int = 0; j < windsDP.length; j++) {
						
						if(lastWinds == windsDP.getItemAt(j).edsid) {
							trace("match");
							
							windsList_.selectedIndex = j;
							//windTitle = windsList_.selectedItem.id;
							windsList_.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE,false,false,-1,j));
						}
					}
					windsList_.selectedIndex = 0;
					//windTitle = windsList_.selectedItem.id;
					metaNameW.text = ResourceManager.getInstance().getString('OilSpill','name2') + windsList_.selectedItem.label;
					windtype = ResourceManager.getInstance().getString('OilSpill','name2') + windsList_.selectedItem.label;
					metaIDW.text = "ID: " + windsList_.selectedItem.id;
					metaBBOXW.text = ResourceManager.getInstance().getString('OilSpill','bBox') + windsList_.selectedItem.bbox;
					metaDateW.text = ResourceManager.getInstance().getString('OilSpill','availability') + windsList_.selectedItem.dateRange;
					windID = windsList_.selectedItem.edsid;
					
					windsLoader.visible=false;
				}
				function serviceError(e:Event) : void 
				{
					currentsLoader.visible=false;
					Alert.show("Error fetching Data sources.");
				}
				//windsLoader.visible=false;
				/*var srvc:WebService = new WebService();
				srvc.useProxy=false;
				srvc.wsdl=_edsSource;
				
				if(srvc.canLoadWSDL())
				{		
					srvc.loadWSDL();
					srvc.GetCatalogBB.addEventListener("result", handleEDSResult);   
					srvc.GetCatalogBB("31585","winds",getGeoExtent()[2],getGeoExtent()[3],getGeoExtent()[1],getGeoExtent()[0]);
					
					function handleEDSResult(event:ResultEvent):void
					{
						var sxml:XML = new XML(event.result.toString());
						var datasets:XMLList=new XMLList(sxml.dataset); 
						var count:uint=datasets.length();
						windsDP = new ArrayCollection();
						for(var i:int=0; i < count; i++)
						{
							var rec:XML = datasets[i];
							windsDP.addItem({label:rec.@description, id:rec.@wmslayeridstr, bbox:rec.@extentleft + "," + rec.@extentbottom + "," + rec.@extentright + "," + rec.@extenttop, 
								edsid:rec.@id, dateRange:DateTimeUtilities.DBStringDateToStringDate(rec.@starttime) + " - " + DateTimeUtilities.DBStringDateToStringDate(rec.@endtime)});
						}
						
						for(var j:int=0; j < windsDP.length;j++) {
							
							if(lastWinds == windsDP.getItemAt(j).edsid) {
								trace("match");
								
								windsList_.selectedIndex = j;
								windsList_.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE,false,false,-1,j));
							}
						}
					}
				}*/
			}
			private function handleListChangeWinds(event:IndexChangeEvent):void
			{
				if(counter > 2)	
				{					
					metaNameW.text = ResourceManager.getInstance().getString('OilSpill','name2') + event.target.selectedItem.label;
					windtype = ResourceManager.getInstance().getString('OilSpill','name2') + event.target.selectedItem.label;
					metaIDW.text = "ID: " + event.target.selectedItem.id;
					metaBBOXW.text = ResourceManager.getInstance().getString('OilSpill','bBox') + event.target.selectedItem.bbox;
					metaDateW.text = ResourceManager.getInstance().getString('OilSpill','availability') + event.target.selectedItem.dateRange;
					
					ViewerContainer.dispatchEvent(new AppEvent(AppEvent.WINDS_NAME_CHANGE, windsList_.selectedItem.label));
					
					lastWinds = event.target.selectedItem.edsid;
					windID = event.target.selectedItem.edsid;
					//check manually to see what layer has been selected
					//apparently the ID from GetEDS sources has been taken out
					/* if(windsList_.selectedItem.label.search("Global")>-1){
						windTitle = "GFS_WINDS";
					}
					else{
						windTitle = "DUBAIWND_WINDS";
					} */
					windTitle = "DUBAIWND_WINDS";
					//windTitle = windsList_.selectedItem.id;
					//windsList_.selectedIndex = 0;
					
					if(winds_.selectedItem.data == "EDS"||winds_.selectedItem.data == "Forecast Data") 
					{
						windID = event.target.selectedItem.edsid;
						//windTitle = event.target.selectedItem.id;
						checkSelection();
					}
				}
				
				//windTitle = windsList_.selectedItem.id;
				//add by Xiaowen
				_windsType=event.target.selectedItem.id;

			}
			private function checkSelection():void
			{
				if(winds_.selectedItem.data == "EDS"||winds_.selectedItem.data == "Forecast Data") {
					if(windID==-2 ||windID==-999|| windID==-1)
					{
						Alert.show(ResourceManager.getInstance().getString('OilSpill','selectDSList'));
						return;
					}
					selectedSourceWinds.text=ResourceManager.getInstance().getString('OilSpill','selectedWinds') + windTitle;
				}
				else
				{
					Alert.show(ResourceManager.getInstance().getString('OilSpill','dataSource'));
					selectedSourceWinds.text=ResourceManager.getInstance().getString('OilSpill','selectedWindsNone');
				}
			}
			private function windsSpeedChangeHandler():void
			{
				if(windsSpeedType.selectedIndex == 0)
				{
					windSPTypeKn = new Number(windsSpeed.text);
					windSPTypeMe = (windSPTypeKn * 00.51444444444444); 
					windSPTypeCM = (windSPTypeKn * 51.4444444444445);  		
					windSPTypeMM = (windSPTypeKn * 514.4444444444444);
					windSP = new String(windSPTypeKn);
				}
				else if(windsSpeedType.selectedIndex == 1)
				{
					windSPTypeKn = (new Number(windsSpeed.text) / 00.51444444444444);
					windSPTypeMe = (windSPTypeKn * 00.51444444444444); 
					windSPTypeCM = (windSPTypeKn * 51.4444444444445);  		
					windSPTypeMM = (windSPTypeKn * 514.4444444444444);
					windSP = new String(windSPTypeKn);
				}
				else if(windsSpeedType.selectedIndex == 2)
				{
					windSPTypeKn = (new Number(windsSpeed.text) / 51.4444444444445);
					windSPTypeMe = (windSPTypeKn * 00.51444444444444); 
					windSPTypeCM = (windSPTypeKn * 51.4444444444445);  		
					windSPTypeMM = (windSPTypeKn * 514.4444444444444);
					windSP = new String(windSPTypeKn);
				}
				else if(windsSpeedType.selectedIndex == 3)
				{
					windSPTypeKn = (new Number(windsSpeed.text) / 514.4444444444444);
					windSPTypeMe = (windSPTypeKn * 00.51444444444444); 
					windSPTypeCM = (windSPTypeKn * 51.4444444444445);  		
					windSPTypeMM = (windSPTypeKn * 514.4444444444444);
					windSP = new String(windSPTypeKn);
				}
			}
			private function windsSpeedTypeChangeHandler(event:IndexChangeEvent):void
			{
				if(windsSpeedType.selectedIndex == 0)
				{
					windsSpeed.text = new String(Number(windSPTypeKn).toFixed(3));
				}
				else if(windsSpeedType.selectedIndex == 1)
				{
					windsSpeed.text = new String(Number(windSPTypeMe).toFixed(3));
				}
				else if(windsSpeedType.selectedIndex == 2)
				{
					windsSpeed.text = new String(Number(windSPTypeCM).toFixed(3));
				}
				else if(windsSpeedType.selectedIndex == 3)
				{
					windsSpeed.text = new String(Number(windSPTypeMM).toFixed(3));
				}
			}
			private function sourceChangeCurrents():void
			{
				forecastUsed = false;
				currents_.dataProvider = currlayArrCol;
				if(currents_.selectedItem.data == "NONE")
				{
					curID = -999;
					curSP = "";
					curDR = "";
					//add by Xiaowen
					_currentsType="NONE";
					
					curtype = currents_.selectedItem.label;
				}
				else if (currents_.selectedItem.data == "MANUAL")
				{
					curtype = currents_.selectedItem.label;
					curID = -1;
					curSP = new String(curSPTypeKn);
					curDR = new String(currentsDir.selectedItem.label);
					//add by Xiaowen
					_currentsType="MANUAL";
					forecastUsed = false;
					if(currentsmanual == false)
					{
						manualCurrentsRows=new ArrayCollection();
						var manualCurrentsDate:Date=new Date(startSpill.dateASA.selectedDate.fullYear,startSpill.dateASA.selectedDate.month,startSpill.dateASA.selectedDate.date,startSpill.hours.value);
						var computerTimeZone:Number=-manualCurrentsDate.getTimezoneOffset()/60;
						var timeDifference:Number=_timeZone-computerTimeZone;
						var computerManualCurrentsDate:Date=new Date(manualCurrentsDate);
						computerManualCurrentsDate.hours-=int(timeDifference);
						computerManualCurrentsDate.minutes-=((timeDifference%1)*60);
						for(var i:int=0;i<simlength.value;i++)
						{
							var timeString:String=manualCurrentsDate.fullYear.toString();
							timeString=timeString+((manualCurrentsDate.month+1).toString().length==1?"0"+(manualCurrentsDate.month+1).toString():(manualCurrentsDate.month+1).toString());
							timeString=timeString+(manualCurrentsDate.date.toString().length==1?"0"+manualCurrentsDate.date.toString():manualCurrentsDate.date.toString());
							timeString+="T";
							timeString=timeString+(manualCurrentsDate.hours.toString().length==1?"0"+manualCurrentsDate.hours.toString():manualCurrentsDate.hours.toString());
							timeString+="00";
							var timeUTCString:String=computerManualCurrentsDate.fullYearUTC.toString();
							timeUTCString=timeUTCString+((computerManualCurrentsDate.monthUTC+1).toString().length==1?"0"+(computerManualCurrentsDate.monthUTC+1).toString():(computerManualCurrentsDate.monthUTC+1).toString());
							timeUTCString=timeUTCString+(computerManualCurrentsDate.dateUTC.toString().length==1?"0"+computerManualCurrentsDate.dateUTC.toString():computerManualCurrentsDate.dateUTC.toString());
							timeUTCString+="T";
							timeUTCString=timeUTCString+(computerManualCurrentsDate.hoursUTC.toString().length==1?"0"+computerManualCurrentsDate.hoursUTC.toString():computerManualCurrentsDate.hoursUTC.toString());
							timeUTCString+="00";
							manualCurrentsRows.addItem({Time:timeString,TimeUTC:timeUTCString,Rate:"0",Direction:"0"});
							//每循环一次日期的小时增加1小时
							manualCurrentsDate.hours+=1;
							computerManualCurrentsDate.hours+=1;
						}
						currentsmanual = true;
					}
				}
				else if (currents_.selectedItem.data == "NOWCASTING")
				{
					curID = -2;
					curSP = "";
					curDR = "";
					forecastUsed = true;
				}
				else if(currents_.selectedItem.data == "EDS"||currents_.selectedItem.data == "Forecast Data") 
				{
					getCurrentsCatalog();
					forecastUsed = true;
				}
				else if(currents_.selectedItem.data == "LOCAL") 
				{
					curID = 0;
					curSP = "";
					curDR = "";
					forecastUsed = false;
				}
			}
			private function getGeoExtent():Array {
				
				var btm:Number;
				var top:Number;
				var lft:Number; 
				var rt:Number;
				
				if(map.spatialReference.wkid == 102100 || map.spatialReference.wkid == 3857)
				{
					var geoExtent:Extent = WebMercatorUtil.webMercatorToGeographic(map.extent) as Extent;
					btm = geoExtent.ymin; 
					top = geoExtent.ymax;
					lft = geoExtent.xmin; 
					rt = geoExtent.xmax;
				}
				else
				{
					btm = map.extent.ymin; 
					top = map.extent.ymax;
					lft = map.extent.xmin; 
					rt = map.extent.xmax;
				}
				
				var e:Array = new Array(btm,top,lft,rt);
				return e;				
			}
			
			private function getCurrentsCatalog():void
			{	
				currentsLoader.visible=true;
				var urlRUN:String = _edsSource + "?";
				urlRUN += "SubCode="+_key+"&";
				urlRUN += "DataType=currents&";
				urlRUN += "bbox="+getGeoExtent()[2]+","+getGeoExtent()[0]+","+getGeoExtent()[3]+","+getGeoExtent()[1];
				
				var serviceLoader:URLLoader = new URLLoader(new URLRequest(urlRUN));
				serviceLoader.addEventListener(Event.COMPLETE, windsResponse);
				serviceLoader.addEventListener(IOErrorEvent.IO_ERROR, serviceError);
				
				function windsResponse(e:Event) : void 
				{  
					var sxml:XML = new XML(e.currentTarget.data);
					var datasets:XMLList = new XMLList(sxml.dataset);
					
					var count:uint = datasets.length();
					curDP = new ArrayCollection();
					var item:XML;
					for each(item in datasets) {
						curDP.addItem({label:item.@description, id:item.@wmslayeridstr, bbox:item.@extentleft + "," + item.@extentbottom + "," + item.@extentright + "," + item.@extenttop, 
							edsid:item.@id, dateRange:DateTimeUtilities.DBStringDateToStringDate(item.@starttime) + " - " + DateTimeUtilities.DBStringDateToStringDate(item.@endtime)});
					}
					
					currentsList.visible=true;
					for(var j:int = 0; j < curDP.length; j++) {
						
						if(lastCurrents == curDP.getItemAt(j).edsid) {
							trace("match");
							
							currentsList.selectedIndex = j;
							currentsList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE,false,false,-1,j));
						}
					}
					currentsList.selectedIndex = 0;
					
					metaNameC.text = ResourceManager.getInstance().getString('OilSpill','name2') + currentsList.selectedItem.label;
					curtype = ResourceManager.getInstance().getString('OilSpill','name2') + currentsList.selectedItem.label;
					metaIDC.text = "ID: " + currentsList.selectedItem.id;
					metaBBOXC.text = ResourceManager.getInstance().getString('OilSpill','bBox') + currentsList.selectedItem.bbox;
					metaDateC.text = ResourceManager.getInstance().getString('OilSpill','availability') + currentsList.selectedItem.dateRange;
					
					//curTitle =currentsList.selectedItem.id;
					lastCurrents = currentsList.selectedItem.edsid;
					curID = currentsList.selectedItem.edsid;
					
					currentsLoader.visible=false;	
				}
				function serviceError(e:Event) : void 
				{
					currentsLoader.visible=false;
					Alert.show("Error fetching Data sources.");
				}
				//currentsLoader.visible=false;
				/*var srvc:WebService = new WebService();
				srvc.useProxy=false;
				srvc.wsdl=_edsSource;
				
				if(srvc.canLoadWSDL())
				{		
					srvc.loadWSDL();
					srvc.GetCatalogBB.addEventListener("result", handleEDSResult);   
					srvc.GetCatalogBB("31585","currents",getGeoExtent()[2],getGeoExtent()[3],getGeoExtent()[1],getGeoExtent()[0]);
					
					function handleEDSResult(event:ResultEvent):void
					{
						var sxml:XML = new XML(event.result.toString());
						var datasets:XMLList=new XMLList(sxml.dataset); 
						var count:uint=datasets.length();
						curDP = new ArrayCollection();
						for(var i:int=0; i < count; i++)
						{
							var rec:XML = datasets[i];
							curDP.addItem({label:rec.@description, id:rec.@wmslayeridstr, bbox:rec.@extentleft + "," + rec.@extentbottom + "," + rec.@extentright + "," + rec.@extenttop, 
								edsid:rec.@id, dateRange:DateTimeUtilities.DBStringDateToStringDate(rec.@starttime) + " - " + DateTimeUtilities.DBStringDateToStringDate(rec.@endtime)});
						}
						for(var j:int=0; j < curDP.length;j++) {
							
							if(lastCurrents == curDP.getItemAt(j).edsid) {
								trace("match");
								
								currentsList.selectedIndex = j;
								currentsList.dispatchEvent(new IndexChangeEvent(IndexChangeEvent.CHANGE,false,false,-1,j));
							}
							
							
						}
					}
				}*/
			}
			private function handleListChangeCurrents(event:IndexChangeEvent):void
			{	
				selectedSource_currents.text="";
				
				if(counter > 2)	
				{
					metaNameC.text = ResourceManager.getInstance().getString('OilSpill','name2') + event.target.selectedItem.label;
					curtype = ResourceManager.getInstance().getString('OilSpill','name2') + event.target.selectedItem.label;
					metaIDC.text = "ID: " + event.target.selectedItem.id;
					metaBBOXC.text = ResourceManager.getInstance().getString('OilSpill','bBox') + event.target.selectedItem.bbox;
					metaDateC.text = ResourceManager.getInstance().getString('OilSpill','availability') + event.target.selectedItem.dateRange;
					
					ViewerContainer.dispatchEvent(new AppEvent(AppEvent.CURRENTS_NAME_CHANGE, event.target.selectedItem.label));
					//curTitle = event.target.selectedItem.id;
					lastCurrents = event.target.selectedItem.edsid;
					curID = event.target.selectedItem.edsid;
					//curTitle = event.target.selectedItem.id;
					
					/* may not be needed, but may want to set to false, don't use int
					if(_runCheck == 1)
					{
						_runCheck = 2;	
					}
					*/
					
					if(currents_.selectedItem.data == "EDS"||currents_.selectedItem.data == "Forecast Data") {
						curID = event.target.selectedItem.edsid;
						//curTitle = event.target.selectedItem.id;
						checkSelectionCurrents();
					}
				}
				//curTitle = event.target.selectedItem.id;
				//add by Xiaowen
				_currentsType =event.target.selectedItem.id;

			}
			private function checkSelectionCurrents():void
			{				
				if(currents_.selectedItem.data == "EDS"||currents_.selectedItem.data == "Forecast Data") {
					if(curID==-2 ||curID==-999|| curID==-1)
					{
						Alert.show(ResourceManager.getInstance().getString('OilSpill','selectDSList'));
						return;
					}
					selectedSource_currents.text=ResourceManager.getInstance().getString('OilSpill','selectedCurrents') + curTitle;
				}
				else
				{
					selectedSource_currents.text=ResourceManager.getInstance().getString('OilSpill','selectedCurrentsNone');
				}
			}
			private function currentsSpeedChangeHandler():void
			{
				if(currentsSpeedType.selectedIndex == 0)
				{
					curSPTypeKn = new Number(currentsSpeed.text);
					curSPTypeMe = (curSPTypeKn * 00.51444444444444); 
					curSPTypeCM = (curSPTypeKn * 51.4444444444445);  		
					curSPTypeMM = (curSPTypeKn * 514.4444444444444);
					curSP = new String(curSPTypeKn);
				}
				else if(currentsSpeedType.selectedIndex == 1)
				{
					curSPTypeKn = (new Number(currentsSpeed.text) / 00.51444444444444);
					curSPTypeMe = (curSPTypeKn * 00.51444444444444); 
					curSPTypeCM = (curSPTypeKn * 51.4444444444445);  		
					curSPTypeMM = (curSPTypeKn * 514.4444444444444);
					curSP = new String(curSPTypeKn);
				}
				else if(currentsSpeedType.selectedIndex == 2)
				{
					curSPTypeKn = (new Number(currentsSpeed.text) / 51.4444444444445);
					curSPTypeMe = (curSPTypeKn * 00.51444444444444); 
					curSPTypeCM = (curSPTypeKn * 51.4444444444445);  		
					curSPTypeMM = (curSPTypeKn * 514.4444444444444);
					curSP = new String(curSPTypeKn);
				}
				else if(currentsSpeedType.selectedIndex == 3)
				{
					curSPTypeKn = (new Number(currentsSpeed.text) / 514.4444444444444);
					curSPTypeMe = (curSPTypeKn * 00.51444444444444); 
					curSPTypeCM = (curSPTypeKn * 51.4444444444445);  		
					curSPTypeMM = (curSPTypeKn * 514.4444444444444);
					curSP = new String(curSPTypeKn);
				}
			}
			private function currentsSpeedTypeChangeHandler(event:IndexChangeEvent):void	
			{
				if(currentsSpeedType.selectedIndex == 0)
				{
					currentsSpeed.text = new String(Number(curSPTypeKn).toFixed(2));
				}
				else if(currentsSpeedType.selectedIndex == 1)
				{
					currentsSpeed.text = new String(Number(curSPTypeMe).toFixed(2));
				}
				else if(currentsSpeedType.selectedIndex == 2)
				{
					currentsSpeed.text = new String(Number(curSPTypeCM).toFixed(2));
				}
				else if(currentsSpeedType.selectedIndex == 3)
				{
					currentsSpeed.text = new String(Number(curSPTypeMM).toFixed(2));
				}
			}
			private function scenarioCheck():void 
			{
				if(scenarioChoice.selectedValue == 1) 
				{
					loadScenXML();
				}
			}
			
			private function clearScenario():void
			{
				if(_oilMODEL)
				{
					map.removeLayer(_oilMODEL);
				}
				if(_oilMODELW)
				{
					winds.selected = false;
					map.removeLayer(_oilMODELW);
				}
				if(_oilMODELC)
				{
					curnts.selected = false;
					map.removeLayer(_oilMODELC);
				}
				/* if(oilWarningLayerCheck)
				{
					oilWarningLayerCheck.selected = false;
					oilWarningLayer.visible = false;
				} */
				trackline.selected = false;
				contour.selected = false;
				mass.selected = false;
				spillets.selected = false;
				swept.selected = false;
				runname.text = "";
				descOil.text = "";
				response = "";
				graphicsLayer.clear();
				showStateScenarios();
			}
			
			private function widgetClose():void
			{
				if(_oilMODEL)
				{
					_oilMODEL.visible = false;;
				}
				if(_oilMODELW)
				{
					winds.selected = false;
					_oilMODELW.visible = false;
				}
				if(_oilMODELC)
				{
					curnts.selected = false;
					_oilMODELC.visible = false;
				}
				graphicsLayer.clear();
				if(myDrawTool)
				{
					myDrawTool.deactivate();
				}
				/* if(oilWarningLayerCheck)
				{
					oilWarningLayerCheck.selected = false;
				}
				oilWarningLayer.visible = false; */
			}
			
			private function widgetOpen():void 
			{	
				currentState='scenarios';
				if(_oilMODEL)
				{
					_oilMODEL.visible = true;
					currentState='layers';
				}
				if(_oilMODELW)
				{
					winds.selected = true;
					_oilMODELW.visible = true;
				}
				if(_oilMODELC)
				{
					curnts.selected = true;
					_oilMODELC.visible = true;
				}
				/* if(oilWarningLayerCheck)
				{
					oilWarningLayerCheck.selected = true;
					oilWarningLayer.visible = true;
				} */
			}

			
			//
			/*protected function basewidget1_creationCompleteHandler(event:FlexEvent):void
			{
				
			}
			private function setEcopDates(event:AppEvent):void
			{
				_startDate = new Date(event.data);
				ViewerContainer.dispatchEvent(new AppEvent(AppEvent.START_DATE_CHANGED, new String(_startDate)));
				//initial the time range is one day
				_endDate.setTime(_startDate.getTime() + (24 * (60*60*1000)));
				ViewerContainer.dispatchEvent(new AppEvent(AppEvent.END_DATE_CHANGED, new String(_endDate)));
			}*/
			
			
			//get booms and overflights from hashtable
			private function getFeaturesFromHashTable():void
			{
				if(hashTable.containsKey("booms"))
				{
					boomsCol=hashTable.find("booms") as ArrayCollection;
				}
				if(hashTable.containsKey("overflights"))
				{
					overflightsCol=hashTable.find("overflights") as ArrayCollection;
				}
			}
			
			private function generateFeaturesXML():void
			{
				//booms XML
				if(boomsCol!=null)
				{
					var boomsXML:XML= new XML();
					boomsXML=
						<booms>
						<spatialreference>EPSG:4326</spatialreference>
						</booms>
					var polylinesXML:XML=
						<polylines>
						</polylines>
					//store the number of Multipoints/Polylines in the graphicProvider
					var lineGraphicNum:int=0;
					for(var i:int=0;i<boomsCol.length;i++ )
					{
						lineGraphicNum++;
						var _polyline:Polyline=Polyline(WebMercatorUtil.webMercatorToGeographic(boomsCol.getItemAt(i).Graphic.geometry));
						//get the string of start and end date
						//convert to computer time zone
						var _computerBoomStart:Date= new Date(boomsCol.getItemAt(i).Start);
						var computerTimeZone:Number=-_computerBoomStart.getTimezoneOffset()/60;
						var timeDifference:Number=_timeZone-computerTimeZone;
						_computerBoomStart.hours-=timeDifference;
						_computerBoomStart.minutes-=((timeDifference%1)*60);
						var _boomStartUTC:String=_computerBoomStart.fullYearUTC.toString();
						_boomStartUTC=_boomStartUTC+((_computerBoomStart.monthUTC+1).toString().length==1?"0"+(_computerBoomStart.monthUTC+1).toString():(_computerBoomStart.monthUTC+1).toString());
						_boomStartUTC=_boomStartUTC+(_computerBoomStart.dateUTC.toString().length==1?"0"+_computerBoomStart.dateUTC.toString():_computerBoomStart.dateUTC.toString());
						_boomStartUTC+="T";
						_boomStartUTC=_boomStartUTC+(_computerBoomStart.hoursUTC.toString().length==1?"0"+_computerBoomStart.hoursUTC.toString():_computerBoomStart.hoursUTC.toString());
						_boomStartUTC+="00";
						
						var _computerBoomEnd:Date= new Date(boomsCol.getItemAt(i).End);
						var computerTimeZone:Number=-_computerBoomEnd.getTimezoneOffset()/60;
						var timeDifference:Number=_timeZone-computerTimeZone;
						_computerBoomEnd.hours-=int(timeDifference);
						_computerBoomEnd.minutes-=((timeDifference%1)*60);
						var _boomEndUTC:String=_computerBoomEnd.fullYearUTC.toString();
						_boomEndUTC=_boomEndUTC+((_computerBoomEnd.monthUTC+1).toString().length==1?"0"+(_computerBoomEnd.monthUTC+1).toString():(_computerBoomEnd.monthUTC+1).toString());
						_boomEndUTC=_boomEndUTC+(_computerBoomEnd.dateUTC.toString().length==1?"0"+_computerBoomEnd.dateUTC.toString():_computerBoomEnd.dateUTC.toString());
						_boomEndUTC+="T";
						_boomEndUTC=_boomEndUTC+(_computerBoomEnd.hoursUTC.toString().length==1?"0"+_computerBoomEnd.hoursUTC.toString():_computerBoomEnd.hoursUTC.toString());
						_boomEndUTC+="00";
						
						var boomGeom:String="LINESTRING(";
						boomGeom+=_polyline.getPoint(0,0).x.toString();
						boomGeom+=" ";
						boomGeom+=_polyline.getPoint(0,0).y.toString();
						for(var j:int=1;j<_polyline.paths[0].length;j++)
						{
							boomGeom+=",";
							boomGeom+=_polyline.getPoint(0,j).x.toString();
							boomGeom+=" ";
							boomGeom+=_polyline.getPoint(0,j).y.toString();
						}
						boomGeom+=")";
						var polylineXML:XML =
							<polyline id="0">
							<name>{boomsCol.getItemAt(i).Name}</name>
							<start_utc>{_boomStartUTC}</start_utc>
							<end_utc>{_boomEndUTC}</end_utc>
							<currentthreshold>{boomsCol.getItemAt(i).CurrentT}</currentthreshold>
							<wavethreshold>{boomsCol.getItemAt(i).WaveT}</wavethreshold>
							<the_geom>{boomGeom}</the_geom>
							</polyline>
						polylineXML.@id=lineGraphicNum.toString();
						polylinesXML.appendChild(polylineXML);
					}
					boomsXML.appendChild(polylinesXML);
					boomsXMLString = boomsXML.toXMLString();
				}
				
				//overflights XML use overflightCol
				if(overflightsCol!=null)
				{
					var overflightsXML:XML= new XML();
					overflightsXML=
						<overflights>
						<spatialreference>EPSG:4326</spatialreference>
						</overflights>
					var polygonsXML:XML=
						<polygons>
						</polygons>
					var polygonGraphicNum:int=0;
					for(var i:int=0;i<overflightsCol.length;i++ )
					{
						polygonGraphicNum++;
						if(overflightsCol.getItemAt(i).Graphic.geometry.type==Geometry.EXTENT)
						{
							var _extent:Extent=Extent(WebMercatorUtil.webMercatorToGeographic(overflightsCol.getItemAt(i).Graphic.geometry));
							//get the parameters of the overflight
							//convert to computer time zone
							var _computerOfTime:Date= new Date(overflightsCol.getItemAt(i).Time);
							var computerTimeZone:Number=-_computerOfTime.getTimezoneOffset()/60;
							var timeDifference:Number=_timeZone-computerTimeZone;
							_computerOfTime.hours-=int(timeDifference);
							_computerOfTime.minutes=((timeDifference%1)*60);
							var _ofTimeUTC:String=_computerOfTime.fullYearUTC.toString();
							_ofTimeUTC=_ofTimeUTC+((_computerOfTime.monthUTC+1).toString().length==1?"0"+(_computerOfTime.monthUTC+1).toString():(_computerOfTime.monthUTC+1).toString());
							_ofTimeUTC=_ofTimeUTC+(_computerOfTime.dateUTC.toString().length==1?"0"+_computerOfTime.dateUTC.toString():_computerOfTime.dateUTC.toString());
							_ofTimeUTC+="T";
							_ofTimeUTC=_ofTimeUTC+(_computerOfTime.hoursUTC.toString().length==1?"0"+_computerOfTime.hoursUTC.toString():_computerOfTime.hoursUTC.toString());
							_ofTimeUTC+="00";
							var overflightGeom:String="POLYGON((";
							//top left
							overflightGeom+=_extent.xmin.toString();
							overflightGeom+=" ";
							overflightGeom+=_extent.ymax.toString();
							overflightGeom+=",";
							//bottom left
							overflightGeom+=_extent.xmin.toString();
							overflightGeom+=" ";
							overflightGeom+=_extent.ymin.toString();
							overflightGeom+=",";
							//bottom right
							overflightGeom+=_extent.xmax.toString();
							overflightGeom+=" ";
							overflightGeom+=_extent.ymin.toString();
							overflightGeom+=",";
							//top right
							overflightGeom+=_extent.xmax.toString();
							overflightGeom+=" ";
							overflightGeom+=_extent.ymax.toString();
							overflightGeom+=",";
							//top left
							overflightGeom+=_extent.xmin.toString();
							overflightGeom+=" ";
							overflightGeom+=_extent.ymax.toString();
							overflightGeom+="))";
							
							var ringXML:XML =
								<ring id="0">
								<name>{overflightsCol.getItemAt(i).Name}</name>
								<time_utc>{_ofTimeUTC}</time_utc>
								<percentoil>{overflightsCol.getItemAt(i).PercentOil}</percentoil>
								<the_geom>{overflightGeom}</the_geom>
								</ring>
							ringXML.@id=polygonGraphicNum.toString();
							polygonsXML.appendChild(ringXML);
						}
						else
						{
							var _polygon:Polygon=Polygon(WebMercatorUtil.webMercatorToGeographic(overflightsCol.getItemAt(i).Graphic.geometry));
							var ringArray:Array=_polygon.rings;
							//一个简单polygon中的rings只有一个ring
							var ringpointArray:Array=ringArray[0];
							//get the parameters of the overflight
							//convert to computer time zone
							var _computerOfTime2:Date= new Date(overflightsCol.getItemAt(i).Time);
							var computerTimeZone:Number=-_computerOfTime2.getTimezoneOffset()/60;
							var timeDifference:Number=_timeZone-computerTimeZone;
							_computerOfTime2.hours-=int(timeDifference);
							_computerOfTime2.minutes-=((timeDifference%1)*60);
							var _ofTime2UTC:String=_computerOfTime2.fullYearUTC.toString();
							_ofTime2UTC=_ofTime2UTC+((_computerOfTime2.monthUTC+1).toString().length==1?"0"+(_computerOfTime2.monthUTC+1).toString():(_computerOfTime2.monthUTC+1).toString());
							_ofTime2UTC=_ofTime2UTC+(_computerOfTime2.dateUTC.toString().length==1?"0"+_computerOfTime2.dateUTC.toString():_computerOfTime2.dateUTC.toString());
							_ofTime2UTC+="T";
							_ofTime2UTC=_ofTime2UTC+(_computerOfTime2.hoursUTC.toString().length==1?"0"+_computerOfTime2.hoursUTC.toString():_computerOfTime2.hoursUTC.toString());
							_ofTime2UTC+="00";
							
							var overflightGeom2:String="POLYGON((";
							overflightGeom2+=ringpointArray[0].x.toString();
							overflightGeom2+=" ";
							overflightGeom2+=ringpointArray[0].y.toString();
							
							if(ringpointArray.length<101)
							{
								for(var j:int=1;j<ringpointArray.length;j++)
								{
									overflightGeom2+=",";
									overflightGeom2+= ringpointArray[j].x.toString();
									overflightGeom2+=" ";
									overflightGeom2+= ringpointArray[j].y.toString();
								}
							}
							else
							{
								//for ellipse, there are too many mappoints,and select one of every ten to save
								for(var j:int=0;(j*10)<ringpointArray.length;j++)
								{
									overflightGeom2+=",";
									overflightGeom2+= ringpointArray[j*10].x.toString();
									overflightGeom2+=" ";
									overflightGeom2+= ringpointArray[j*10].y.toString();
								}
							}
							overflightGeom2+="))";
							var ringXML:XML =
								<ring id="0">
								<name>{overflightsCol.getItemAt(i).Name}</name>
								<time_utc>{_ofTime2UTC}</time_utc>
								<percentoil>{overflightsCol.getItemAt(i).PercentOil}</percentoil>
								<the_geom>{overflightGeom2}</the_geom>
								</ring>
							ringXML.@id=polygonGraphicNum.toString();
							polygonsXML.appendChild(ringXML);
						}	
					}
					overflightsXML.appendChild(polygonsXML);
					overflightsXMLString = overflightsXML.toXMLString();
				}
				
			}
			//generate manual winds and currents
			private function generateManualWindsShowStateCurrents():void
			{
				if(toEarly == true)
				{
					//winds_.selectedIndex = 2;
				}
				//check winds type
				if(winds_.selectedIndex==1)
				{
					//check the data complete
					var b:Boolean=true;
					for(var i:int=0;i<manualWindsRows.length;i++)
					{
						if(manualWindsRows.getItemAt(i).Direction==null||manualWindsRows.getItemAt(i).Direction.length<1||manualWindsRows.getItemAt(i).Rate==null||manualWindsRows.getItemAt(i).Rate.length<1)
						{
							b=false;
							break;
						}
					}
					if(b)
					{
						generateManualWinds();
					}
					else
					{
						//Alert.show(ResourceManager.getInstance().getString('OilSpill','incompleteInput'), "Input Missing");
						//return and will not show state currents
						return ;
					}
				}
				//check eds layers
				if(winds_.selectedIndex==0)
				{
					windsList_.selectedIndex = 0;
					if(windsList_.selectedIndex>-1){
						showStateCurrents();
					}
					else
					{
						//Alert.show(ResourceManager.getInstance().getString('OilSpill','incompleteInput'), "Input Missing");
						//return and will not show state currents
						return ;
					}
				}
				else{
					//show state currents
					showStateCurrents();
				}
			}
			private function generateManualWinds():void
			{
				manualWindsString="Time(YYYYMMDDTHHMM),TimeUTC,Rate("
				manualWindsString+=windsSpeedType.selectedItem.data.toString();
				manualWindsString=manualWindsString+"),Direction;Location,"+textN+","+textW+";"
				manualWindsString+=manualWindsRows.getItemAt(0).Time.toString();
				manualWindsString+=",";
				manualWindsString+=manualWindsRows.getItemAt(0).TimeUTC.toString();
				manualWindsString+=",";
				manualWindsString+=manualWindsRows.getItemAt(0).Rate.toString();
				manualWindsString+=",";
				manualWindsString+=manualWindsRows.getItemAt(0).Direction.toString();
				for(var i:int=1;i<manualWindsRows.length;i++)
				{
					manualWindsString+=";";
					manualWindsString+=manualWindsRows.getItemAt(i).Time.toString();
					manualWindsString+=",";
					manualWindsString+=manualWindsRows.getItemAt(i).TimeUTC.toString();
					manualWindsString+=",";
					manualWindsString+=manualWindsRows.getItemAt(i).Rate.toString();
					manualWindsString+=",";
					manualWindsString+=manualWindsRows.getItemAt(i).Direction.toString();
					
				}
			}

			//load txt file to fill the manual winds datagrid
			protected function loadManualED_clickHandler(event:MouseEvent):void
			{
				var loadFile:FileReference= new FileReference();
				loadFile.addEventListener(Event.SELECT,selectHandler)
				loadFile.addEventListener(Event.COMPLETE,loadCompleteHandler);
				loadFile.addEventListener(IOErrorEvent.IO_ERROR,loadIoErrorHandler);
				var fileFilter:FileFilter= new FileFilter("manualFile(*.txt)","*.txt");
				var fileFilterArray:Array=new Array(fileFilter);
				loadFile.browse(fileFilterArray);
				function selectHandler(event:Event):void
				{
					loadFile.load();
				}
				function loadCompleteHandler(event:Event):void
				{
					manualWindsString=loadFile.data.toString();
					manualWindsRows.removeAll();
					var manualWindsArray:Array=manualWindsString.split(";");
					for(var i:int=2;i<manualWindsArray.length;i++)
					{
						var subManualWindsArray:Array=manualWindsArray[i].split(",");
						manualWindsRows.addItem({Time:subManualWindsArray[0],TimeUTC:subManualWindsArray[1],Rate:subManualWindsArray[2],Direction:subManualWindsArray[3]});
					}
				}
				
				function loadIoErrorHandler(event:Event):void
				{
					Alert.show(event.toString());
				}
			}
			
			//save the manual winds to txt file
			protected function saveManualED_clickHandler(event:MouseEvent):void
			{
				//
				if(manualWindsString==null||manualWindsString.length<1)
				{
					Alert.show("Please save file！");
				}
				else
				{
					var saveFile:FileReference= new FileReference();
					saveFile.addEventListener(Event.COMPLETE,saveCompleteHandler);
					saveFile.addEventListener(IOErrorEvent.IO_ERROR,saveIoErrorHandler);
					saveFile.save(manualWindsString,"manualWinds.txt");
					function saveCompleteHandler(event:Event):void
					{
						Alert.show("File Saved！");
					}
					
					function saveIoErrorHandler(event:Event):void
					{
						Alert.show(event.toString());
					}
				}
			}
			
			protected function saveEditManualED_clickHandler(event:MouseEvent):void
			{
				// save the manualWinds datagrid to manualWindsString
				manualWindsRows = manualWindsDG.dataProvider as ArrayCollection;
				generateManualWinds();
			}
			
			private function updateWindsManual(event:ListEvent):void
			{
				manualWindsRows.addItem(event.target.selectedItem);
				//manualWindsRows = manualWindsDG.dataProvider as ArrayCollection;
			}
			//manual currents
			private function generateManualCurrentsShowStateReview():void
			{
				//check currents type
				if(currents_.selectedIndex==1)
				{
					//check the data complete
					var b:Boolean=true;
					for(var i:int=0;i<manualCurrentsRows.length;i++)
					{
						if(manualCurrentsRows.getItemAt(i).Direction==null||manualCurrentsRows.getItemAt(i).Direction.length<1||manualCurrentsRows.getItemAt(i).Rate==null||manualCurrentsRows.getItemAt(i).Rate.length<1)
						{
							b=false;
							break;
						}
					}
					if(b)
					{
						generateManualCurrents();
					}
					else
					{
						//Alert.show(ResourceManager.getInstance().getString('OilSpill','incompleteInput'), "Input Missing");
						//return and will not show state currents
						return ;
					}
				}
				//check eds layers
				if(currents_.selectedIndex==0)
				{
					currentsList.selectedIndex =0;
					if(currentsList.selectedIndex>-1){
						showStateReview();
					}
					else
					{
						//Alert.show(ResourceManager.getInstance().getString('OilSpill','incompleteInput'), "Input Missing");
						//return and will not show state currents
						return ;
					}
				}
				else{
					//show state review
					showStateReview();
				}
			}
			private function generateManualCurrents():void
			{
				manualCurrentsString="Time(YYYYMMDDTHHMM),TimeUTC,Rate("
				manualCurrentsString+=currentsSpeedType.selectedItem.data.toString();
				manualCurrentsString=manualCurrentsString+"),Direction;Location,"+textN+","+textW+";"
				manualCurrentsString+=manualCurrentsRows.getItemAt(0).Time.toString();
				manualCurrentsString+=",";
				manualCurrentsString+=manualCurrentsRows.getItemAt(0).TimeUTC.toString();
				manualCurrentsString+=",";
				manualCurrentsString+=manualCurrentsRows.getItemAt(0).Rate.toString();
				manualCurrentsString+=",";
				manualCurrentsString+=manualCurrentsRows.getItemAt(0).Direction.toString();
				for(var i:int=1;i<manualCurrentsRows.length;i++)
				{
					manualCurrentsString+=";";
					manualCurrentsString+=manualCurrentsRows.getItemAt(i).Time.toString();
					manualCurrentsString+=",";
					manualCurrentsString+=manualCurrentsRows.getItemAt(i).TimeUTC.toString();
					manualCurrentsString+=",";
					manualCurrentsString+=manualCurrentsRows.getItemAt(i).Rate.toString();
					manualCurrentsString+=",";
					manualCurrentsString+=manualCurrentsRows.getItemAt(i).Direction.toString();
				}
			}
			
			//load txt file to fill the manual currents datagrid
			protected function loadManualED2_clickHandler(event:MouseEvent):void
			{
				var loadFile:FileReference= new FileReference();
				loadFile.addEventListener(Event.SELECT,selectHandler)
				loadFile.addEventListener(Event.COMPLETE,loadCompleteHandler);
				loadFile.addEventListener(IOErrorEvent.IO_ERROR,loadIoErrorHandler);
				var fileFilter:FileFilter= new FileFilter("manualwinds(*.txt)","*.txt");
				var fileFilterArray:Array=new Array(fileFilter);
				loadFile.browse(fileFilterArray);
				function selectHandler(event:Event):void
				{
					loadFile.load();
				}
				function loadCompleteHandler(event:Event):void
				{
					manualCurrentsString=loadFile.data.toString();
					manualCurrentsRows.removeAll();
					var manualCurrentsArray:Array=manualCurrentsString.split(";");
					
					for(var i:int=2;i<manualCurrentsArray.length;i++)
					{
						var subManualCurrentsArray:Array=manualCurrentsArray[i].split(",");
						manualCurrentsRows.addItem({Time:subManualCurrentsArray[0],TimeUTC:subManualCurrentsArray[1],Rate:subManualCurrentsArray[2],Direction:subManualCurrentsArray[3]});
					}
					Alert.show("Loaded successfully！");
				}
				
				function loadIoErrorHandler(event:Event):void
				{
					Alert.show(event.toString());
				}
			}
			
			//save the manual currents to txt file
			protected function saveManualED2_clickHandler(event:MouseEvent):void
			{
				//
				if(manualCurrentsString==null||manualCurrentsString.length<1)
				{
					Alert.show("Please Save File");
				}
				else
				{
					var saveFile:FileReference= new FileReference();
					saveFile.addEventListener(Event.COMPLETE,saveCompleteHandler);
					saveFile.addEventListener(IOErrorEvent.IO_ERROR,saveIoErrorHandler);
					saveFile.save(manualCurrentsString,"manualCurrents.txt");
					function saveCompleteHandler(event:Event):void
					{
						Alert.show("File Saved！");
					}
					
					function saveIoErrorHandler(event:Event):void
					{
						Alert.show(event.toString());
					}
				}
			}
			
			protected function saveEditManualED2_clickHandler(event:MouseEvent):void
			{
				// save the manualWinds datagrid to manualWindsString
				generateManualCurrents();
			}
			//change time zone
			protected function changeTimeZone(event:AppEvent):void
			{
				if(hashTable.containsKey("timezone"))
				{
					_timeZone=hashTable.find("timezone") as Number;
				}
				
			}
			//make sure that the model output step is less then model step
			private function checkNumberboundary(evnt:IndexChangeEvent):void
			{
				if(modelTimeStep.selectedIndex > outputTimeInterval.selectedIndex)
				{
					outputTimeInterval.selectedIndex = modelTimeStep.selectedIndex;
				}
				ViewerContainer.dispatchEvent(new AppEvent(AppEvent.TIMESLIDER_INTERVAL_CHANGE, outputTimeInterval.selectedItem.data));
			}			

		]]>
	</fx:Script>
	
	<fx:Declarations>
		<s:Animate id="fader"
				   duration="2000"
				   repeatBehavior="loop"
				   repeatCount="0"
				   target="{timesliderL}">
			<s:SimpleMotionPath property="alpha"
								valueFrom="1.0" valueTo="0.2" />
		</s:Animate>
		<esri:GeometryService id="geometryService" fault="onFault(event)"
							  url="http://sampleserver3.arcgisonline.com/ArcGIS/rest/services/Geometry/GeometryServer"/>
		<esri:PictureMarkerSymbol id="pms_by_url" height="24" width="24" source="assets/images/SpillSite.png"/>
		<esri:SimpleLineSymbol id="lines" color="0x302522" width="1"/>
		<esri:SimpleFillSymbol id="mySymbol" alpha="0.4" outline="{lines}" style="solid"/>
		
		<esri:DrawTool id="myDrawTool" drawEnd="drawEnd(event)" graphicsLayer="{graphicsLayer}" map="{map}" markerSymbol="{pms_by_url}"/>		
		<s:RadioButtonGroup id="scenarioChoice" change="{scenarioCheck()}" />
		<s:RadioButtonGroup id="latlngChoice" itemClick="{convertTextPoint()}"/>
		<s:RadioButtonGroup id="manualWindsChoice" selectedValue="0" enabled="false"/>
		<s:RadioButtonGroup id="manualCurrentsChoice" selectedValue="0" enabled="false"/>
		<net:URLLoader id="urlLoader" dataFormat="{URLLoaderDataFormat.BINARY}" />	
	</fx:Declarations>	
	<viewer:WidgetTemplate creationPolicy="all" enableIcon="false" enableResizeButton="false" enableMinimizeButton="true" id="wOilSpill" open="widgetOpen()" closed="widgetClose()" height="395" width="535">		
		<s:Group id="Scenario" includeIn="scenarios" width="100%" height="100%">			
			<s:layout>
				<s:VerticalLayout/>
			</s:layout>			
			<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
				<s:RadioButton group="{scenarioChoice}" label="{ResourceManager.getInstance().getString('OilSpill','newScenario')}" right="10" value="0" selected="true"/>
				<s:RadioButton group="{scenarioChoice}" label="{ResourceManager.getInstance().getString('OilSpill','loadScenario')}" left="10" value="1"/>
				<s:RadioButton group="{scenarioChoice}" label="{ResourceManager.getInstance().getString('OilSpill','delScenario')}" right="10" value="2"/>
			</s:HGroup>
			<mx:ViewStack id="scenariosStack" selectedIndex="{int(scenarioChoice.selectedValue)}" creationPolicy="all" width="100%" height="100%">				
				<!-- NEW SCENARIO -->
				<mx:VBox width="100%" paddingLeft="20" paddingRight="15" paddingBottom="20" height="100%">					
					<mx:HRule width="100%"/>
					<s:HGroup width="100%" verticalAlign="middle">
						<s:VGroup width="100%">
							<s:VGroup>
								<s:HGroup gap="5" width="100%" verticalAlign="middle">
									<!--<s:Label paddingRight="9" text="{ResourceManager.getInstance().getString('OilSpill','createNew')}" />
									<s:ToggleButton id="mapButton" label="{ResourceManager.getInstance().getString('OilSpill','mapPoint')}" cornerRadius="5" click="{activateDrawTool()}"/>-->				
									<s:Label width="90" text="{ResourceManager.getInstance().getString('OilSpill','scenarioName')}" />
									<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="runname" width="190" text=""/>
								</s:HGroup>
								<s:HGroup gap="5" width="100%" verticalAlign="middle">
									<s:Label width="90" text="{ResourceManager.getInstance().getString('OilSpill','descName')}"  />
									<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="descOil" width="365" text=""/>
								</s:HGroup>
							</s:VGroup>
							<mx:HRule width="100%"/>
							<s:HGroup gap="4" paddingBottom="2" paddingTop="2" width="100%" verticalAlign="middle">
								<s:VGroup width="100%">
									<s:HGroup paddingTop="1" paddingRight="8" verticalAlign="middle" horizontalAlign="center" width="100%">
										<mx:ViewStack selectedIndex="{int(latlngChoice.selectedValue)}" creationPolicy="all" width="100%">
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="{ResourceManager.getInstance().getString('OilSpill','latitude')}" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder"  id="lat1" width="75" textAlign="right" restrict=".0-9" change="changeTextLat(event)">
													<!--<mx:filters>
														<mx:GlowFilter blurX='6' blurY='6'
																		 alpha='1' color='#ff0000'
															 knockout='false' quality='1'
															  strength='25' inner='false'/>
													</mx:filters>-->
												</mx:TextInput>
												<s:Label text="°" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:Text  id="latDir1" width="20" textAlign="center" />
											</mx:HBox>
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="{ResourceManager.getInstance().getString('OilSpill','latitude')}" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="lat2" width="30" textAlign="right" restrict=".0-9" maxChars="3" change="changeTextLat2(event)"/>
												<s:Label text="°" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="lat2m" width="55" textAlign="right" restrict=".0-9" maxChars="2" change="changeTextLat(event)"/>
												<s:Label text="'" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="latDir2" width="20" textAlign="center" restrict="N S" maxChars="1" change="changeTextLat2(event)"/>
											</mx:HBox>
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="{ResourceManager.getInstance().getString('OilSpill','latitude')}" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="lat3" width="30" textAlign="right" restrict="0-9" maxChars="3" change="changeTextLat3(event)"/>
												<s:Label text="°" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="lat3m" width="40" textAlign="right" restrict=".0-9" maxChars="2" change="changeTextLat3(event)"/>
												<s:Label text="'" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="lat3s" width="40" textAlign="right" restrict=".0-9" maxChars="2" change="changeTextLat3(event)"/>
												<s:Label text="&quot;" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="latDir3" width="20" textAlign="center" restrict="N S" maxChars="1" change="changeTextLat3(event)"/>
											</mx:HBox>
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="Northing:" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="lat4" width="96" textAlign="right" restrict=".0-9" maxChars="13" change="changeTextDM(event)"/>
												<s:Label text="meters" height="22" verticalAlign="middle"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="latDir4" width="20" textAlign="center" restrict="N S" maxChars="1" change="changeTextLat(event)" visible="false"/>
											</mx:HBox>
										</mx:ViewStack>
									</s:HGroup>
									<s:HGroup verticalAlign="middle" width="100%">
										<mx:ViewStack selectedIndex="{int(latlngChoice.selectedValue)}"  creationPolicy="all" width="100%">
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="{ResourceManager.getInstance().getString('OilSpill','longitude')}" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="long1" width="75" textAlign="right" restrict=".0-9" change="changeTextLon(event)"/>
												<s:Label text="°" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:Text  id="longDir1" width="20" textAlign="center" />
											</mx:HBox>
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="{ResourceManager.getInstance().getString('OilSpill','longitude')}" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="long2" width="30" textAlign="right" restrict=".0-9" maxChars="3" change="changeTextLong2(event)"/>
												<s:Label text="°" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="long2m" width="55" textAlign="right" restrict=".0-9" maxChars="2"  change="changeTextLong2(event)"/>
												<s:Label text="'" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="longDir2" width="22" text="E" textAlign="center" restrict="W E" maxChars="1" change="changeTextLong2(event)"/>
											</mx:HBox>
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="{ResourceManager.getInstance().getString('OilSpill','longitude')}" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="long3" width="30" textAlign="right" restrict="0-9" maxChars="3" change="changeTextLong3(event)"/>
												<s:Label text="°" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="long3m" width="40" textAlign="right" restrict=".0-9" maxChars="2" change="changeTextLong3(event)"/>
												<s:Label text="'" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="long3s" width="40" textAlign="right" restrict=".0-9" maxChars="2" change="changeTextLong3(event)"/>
												<s:Label text="&quot;" height="22" verticalAlign="middle" fontSize="20"/>
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="longDir3" width="22" textAlign="center" restrict="W E" maxChars="1" change="changeTextLong3(event)"/>
											</mx:HBox>
											<mx:HBox verticalAlign="middle" horizontalScrollPolicy="off">
												<s:Label text="Easting" width="90" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="long4" width="96" textAlign="right" restrict=".0-9" maxChars="13" change="changeTextDM(event)"/>
												<s:Label text="meters" height="22" verticalAlign="middle" />
												<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="longDir4" visible="false" width="20" textAlign="center" restrict="W E" maxChars="1" change="changeTextLon(event)"/>
											</mx:HBox>
										</mx:ViewStack>
									</s:HGroup>
								</s:VGroup>
								<s:BorderContainer height="65" width="91" borderColor="#FFFFFF" backgroundAlpha="0.0" contentBackgroundAlpha="0.0" borderAlpha="0" cornerRadius="5" >
									<s:VGroup gap="2" fontSize="10"  top="3" bottom="3" right="1" left="1">
										<s:RadioButton  id="d3" group="{latlngChoice}" label="DD.DD"    fontSize="11" value="0" selected="true" />
										<s:RadioButton  id="d2" group="{latlngChoice}" label="DD MM.MM" fontSize="11" value="1" />
										<!--<s:RadioButton  id="d1" group="{latlngChoice}" label="DD MM SS" fontSize="11" value="2" />-->
										<s:RadioButton  id="d4" group="{latlngChoice}" label="DLTM" fontSize="11" value="3" />
									</s:VGroup>
								</s:BorderContainer>
								<mx:Button label="Spill Site" paddingLeft="6" toolTip="Click Spill Site on Map" height="30" icon="@Embed(source='assets/images/SpillSiteIco.png')" click="activateDrawTool()" id="iconMarker" />
						</s:HGroup>
						</s:VGroup>
					</s:HGroup>
					<mx:HRule width="100%"/>
					<s:HGroup width="100%" paddingTop="4" verticalAlign="middle">
						<s:Label width="90" text="{ResourceManager.getInstance().getString('OilSpill','start')}" />
						<util:AsaDateTimePicker_numbersteper dateRange="{dateRange}" change="setDates()" paddingLeft="2" id="startSpill" />
						<s:Label text=":00" />
						<s:Label id="strtWarning" text="Exceeds forecast data availability." visible="{toEarly}" color="0xcd1b21"/>
					</s:HGroup>
					<s:HGroup paddingTop="4" width="100%" verticalAlign="middle">
						<s:Label width="90" height="40" paddingRight="8" text="{ResourceManager.getInstance().getString('OilSpill','waterTemp')}" />
						<mx:NumericStepper borderSkin="mx.skins.halo.HaloBorder" height="24" change="waterTempChangeHandler()" minimum="-500" width="60" maximum="150" id="waterTemp" stepSize="1" 
										   value="20" />
						<s:DropDownList id="tempType" change="tempTypeChangeHandler(event)" width="85" 
										selectedIndex="0" cornerRadius="3" lineThrough="false" textDecoration="none" height="24">
							<mx:ArrayCollection>
								<fx:Object label="°C" data="CELSIUS"/>
								<fx:Object label="°F" data="FAHRENHEIGHT"/>
							</mx:ArrayCollection>
						</s:DropDownList>	
					</s:HGroup>
					<s:HGroup horizontalAlign="center" paddingRight="20" width="100%" gap="20" height="100%" verticalAlign="bottom">
						<s:Button enabled="{long1.text!=''}" cornerRadius="5" fontSize="12" fontWeight="bold" label="{ResourceManager.getInstance().getString('OilSpill','next')}" width="70" click="showStateSpill()" />
					</s:HGroup>
				</mx:VBox>			
				<!--LOAD SCENARIO-->
				<mx:VBox width="100%" height="100%">
					<mx:DataGrid width="100%" height="100%"
								 contentBackgroundAlpha="0.3" dataProvider="{ldpRuns}" doubleClickEnabled="false" itemDoubleClick="noload(event)" itemClick="loadScenario(event)">
						<mx:columns>
							<mx:DataGridColumn width="180" minWidth="180" headerText="Name" dataField="Name" />
							<mx:DataGridColumn width="90" minWidth="90" dataField="Date" />
							<mx:DataGridColumn width="90" minWidth="90" headerText="Simulation Length" dataField="SimLength" />
							<!--<mx:DataGridColumn dataField="{ResourceManager.getInstance().getString('OilSpill','name')}" />-->
							<!--<mx:DataGridColumn dataField="{ResourceManager.getInstance().getString('OilSpill','date')}" />-->
							<!--<mx:DataGridColumn dataField="{ResourceManager.getInstance().getString('OilSpill','simLength')}" />-->
						</mx:columns> 
					</mx:DataGrid>
					<mx:HBox>
						<s:Label text="{ResourceManager.getInstance().getString('OilSpill','clickLoadSce')}" fontStyle="italic"/>	
						<s:Button click="loadScenXML()" fontSize="11" label="Refresh Scenarios" height="20"/>
						<mx:SWFLoader id="wLoader" source="assets/images/loader.swf" visible="false"/>
					</mx:HBox>
				</mx:VBox>
				<!--DELETE SCENARIO-->
				<mx:VBox width="100%" height="100%">
					<mx:DataGrid width="100%" height="100%" 
								 contentBackgroundAlpha="0.3" dataProvider="{ldpRuns}" itemDoubleClick="noload(event)" doubleClickEnabled="false" itemClick="deleteScenario(event)">
						<mx:columns>
							<mx:DataGridColumn width="180" minWidth="180" headerText="Name" dataField="Name" />
							<mx:DataGridColumn width="80" minWidth="90" dataField="Date" />
							<mx:DataGridColumn width="90" minWidth="90" headerText="Simulation Length" dataField="SimLength" />
							
							<!--<mx:DataGridColumn dataField="{ResourceManager.getInstance().getString('OilSpill','name')}" />-->
							<!--<mx:DataGridColumn dataField="{ResourceManager.getInstance().getString('OilSpill','date')}" />-->
							<!--<mx:DataGridColumn dataField="{ResourceManager.getInstance().getString('OilSpill','simLength')}" />-->
						</mx:columns> 
					</mx:DataGrid>
					<mx:HBox>
						<s:Label text="{ResourceManager.getInstance().getString('OilSpill','clickDelSce')}" fontStyle="italic"/>
					</mx:HBox>
				</mx:VBox>
			</mx:ViewStack>
		</s:Group>
		<s:VGroup paddingLeft="20" id="Spill" includeIn="spill" width="100%" height="100%" horizontalAlign="left">			
			<s:VGroup width="100%" height="100%" horizontalAlign="left">
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="{ResourceManager.getInstance().getString('OilSpill','oilSpillAmout')}" width="125"/>
					<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="volume" width="50" text="1000" restrict="0 1 2 3 4 5 6 7 8 9"  textAlign="right"/>
					<s:DropDownList id="AmtType" width="115" cornerRadius="3" selectedIndex="3">
						<mx:ArrayCollection>
							<fx:Object label="Liters" data="LITERS"/>
							<fx:Object label="Gallons" data="GALLONS"/>
							<fx:Object label="Cubic Meters" data="CUBIC METERS"/>
							<fx:Object label="Tonnes" data="TONNES"/>
							<fx:Object label="Barrels" data="BARRELS"/>
							<fx:Object label="Pounds" data="POUNDS"/>
							<fx:Object label="Kilograms" data="KILOGRAMS"/>
						</mx:ArrayCollection>
					</s:DropDownList>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="{ResourceManager.getInstance().getString('OilSpill','oilType')}" width="125"/>
					<s:List id="SpillType" width="172" height="130" selectedIndex="1">
						<mx:ArrayCollection>
							<fx:Object label="Dubai Oil - DP Assay" data="Dubai Oil - DP Assay"/>
							<fx:Object label="Dubai Crude" data="Dubai Crude"/>
							<fx:Object label="HFO 380" data="HFO 380"/>
							<fx:Object label="Lower Zakum" data="Lower Zakum"/>
							<fx:Object label="Bunker C Fuel Oil #6" data="BUNKER C FUEL OIL %236"/>
							<fx:Object label="Gasoline (leaded)" data="GASOLINE (LEADED)"/>
							<fx:Object label="Conservative Tracer" data="CONSERVATIVE TRACER"/>
							<fx:Object label="Gasoline (unleaded)" data="GASOLINE (UNLEADED)"/>
							<fx:Object label="Diesel" data="DIESEL"/>
							<fx:Object label="Diesel Fuel" data="DIESEL FUEL OIL"/>
							<fx:Object label="Marine Diesel Fuel" data="MARINE DIESEL FUEL "/>
							<fx:Object label="Light Crude" data="LIGHT CRUDE OIL"/>
							<fx:Object label="Medium Crude" data="MEDIUM CRUDE OIL"/>
							<fx:Object label="Heavy Crude Oil " data="HEAVY CRUDE OIL "/>
							<fx:Object label="Prudhoe Bay Crude" data="PRUDHOE BAY CRUDE"/>
							<fx:Object label="JP-4(Fuel Oil No. 1)" data="JP-4(FUEL OIL No. 1)"/>
							<fx:Object label="Jet Fuel A-1" data="JET FUEL A-1"/>
						</mx:ArrayCollection>
					</s:List>
				</s:HGroup>	
				<mx:HRule width="100%"/>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="{ResourceManager.getInstance().getString('OilSpill','simulationLength')}" width="130"/>
					<mx:NumericStepper borderSkin="mx.skins.halo.HaloBorder" height="24" minimum="1" maximum="240" id="simlength" 
									  change="setDates();" stepSize="1"  value="24" width="60"/>
					<s:Label id="l7"  text="{ResourceManager.getInstance().getString('OilSpill','hour')}" left="201" fontSize="11"  top="78"/>
					<s:Label id="stepWarning" text="Duration exceeds forecast data availability." visible="{toEarly}" color="0xcd1b21"/>
				</s:HGroup>
				<s:HGroup width="100%" paddingBottom="10" verticalAlign="middle">
					<s:Label text="{ResourceManager.getInstance().getString('OilSpill','releaseDuration')}" width="130"/>
					<mx:NumericStepper borderSkin="mx.skins.halo.HaloBorder" id="durSpill" height="24" maxChars="2" stepSize="1"  maximum="72" minimum="0" top="72" textAlign="center"/>
					<s:Label text="{ResourceManager.getInstance().getString('OilSpill','hour')}" fontSize="11" />
				</s:HGroup>
				<s:HGroup verticalAlign="middle">
					<s:Label text="{ResourceManager.getInstance().getString('OilSpill','modelTimeStep')}" width="130"/>
					<s:DropDownList id="modelTimeStep" width="63" cornerRadius="3" change="checkNumberboundary(event)"
									selectedIndex="2" lineThrough="false" textDecoration="none" height="24">
						<mx:ArrayCollection>
							<fx:Object label="5" data="5"/>
							<fx:Object label="10" data="10"/>
							<fx:Object label="20" data="20"/>
							<fx:Object label="30" data="30"/>
							<fx:Object label="60" data="60"/>
							<fx:Object label="90" data="90"/>
							<fx:Object label="120" data="120"/>
							<fx:Object label="180" data="180"/>
							<fx:Object label="300" data="300"/>
						</mx:ArrayCollection>
					</s:DropDownList>
					<s:Label id="modelTimeStepTip"  text="{ResourceManager.getInstance().getString('OilSpill','modelTimeStepTip')}" fontSize="11"/>
				</s:HGroup>
				<s:HGroup width="100%" verticalAlign="middle">
					<s:Label text="{ResourceManager.getInstance().getString('OilSpill','outputTimeInterval')}" width="130"/>
					<s:DropDownList id="outputTimeInterval" width="63" cornerRadius="3" change="checkNumberboundary(event)"
									selectedIndex="4" lineThrough="false" textDecoration="none" height="24">
						<mx:ArrayCollection>
							<fx:Object label="5" data="5"/>
							<fx:Object label="10" data="10"/>
							<fx:Object label="20" data="20"/>
							<fx:Object label="30" data="30"/>
							<fx:Object label="60" data="60"/>
							<fx:Object label="90" data="90"/>
							<fx:Object label="120" data="120"/>
							<fx:Object label="180" data="180"/>
							<fx:Object label="300" data="300"/>
						</mx:ArrayCollection>
					</s:DropDownList>
					<s:Label id="outputTimeIntervalTip"  text="{ResourceManager.getInstance().getString('OilSpill','outputTimeIntervalTip')}" fontSize="11"/>
				</s:HGroup>
			</s:VGroup>
			<s:HGroup horizontalAlign="center" width="100%" verticalAlign="bottom" >				
				<s:Button fontSize="12" fontWeight="bold"  cornerRadius="5" label="{ResourceManager.getInstance().getString('OilSpill','previous')}" click="showStateScenarios()"  />
				<s:Button  fontSize="12" fontWeight="bold" cornerRadius="5" label="{ResourceManager.getInstance().getString('OilSpill','next')}" width="70" click="showStateWinds()" />
			</s:HGroup>
		</s:VGroup>
		<!--WINDS-->	
		<s:VGroup id="Winds" includeIn="winds" width="100%" height="100%" horizontalAlign="center">			
			<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label text="{ResourceManager.getInstance().getString('OilSpill','windsDataSource')}" />
				<s:DropDownList id="winds_" selectedIndex="{sourceSelectedIndex}" change="sourceChangeWinds()" width="135" cornerRadius="3" height="24">
					<!--<mx:ArrayCollection>
						<fx:Object label="{ResourceManager.getInstance().getString('OilSpill','none')}" data="NONE"/>
						<fx:Object label="{ResourceManager.getInstance().getString('OilSpill','manual')}" data="MANUAL"/>
						<fx:Object label="Nowcasting" data="NOWCAST"/>
						<fx:Object label="EDS" data="EDS"/>
					</mx:ArrayCollection>-->
				</s:DropDownList>
			</s:HGroup>			
			<mx:ViewStack id="windStack" selectedIndex="{winds_.selectedIndex}" creationPolicy="all" width="100%" height="100%">				
				<!--EDS-->
				<mx:VBox width="100%" height="100%">
					<s:List id="windsList_" width="100%" height="100%" dataProvider="{windsDP}" change="{handleListChangeWinds(event)}"/>
					<s:Label id="selectedSourceWinds" text=" " verticalAlign="middle"/>
					<s:BorderContainer width="100%" height="75" backgroundAlpha="0.15" borderVisible="false">
						<s:VGroup id="metaBoxW" height="95" width="100%" gap="3" rowHeight="20" variableRowHeight="false" >
							<mx:Label id="metaNameW" text="" fontSize="13" height="13"/>
							<mx:Label id="metaBBOXW" fontSize="13" height="13"/>
							<mx:Label id="metaDateW" fontSize="13" height="13"/>
							<mx:Label id="metaIDW" visible="false"  fontSize="11" height="0"/>
						</s:VGroup>
					</s:BorderContainer>
					<s:Label id="timeDisclaimerwinds" paddingTop="3" visible="{toEarly}" top="218" paddingLeft="10" width="495" color="0xcd1b21" fontSize="12" fontWeight="bold" text="The selected Start Date is beyond the normal data availability range.  Please note that using this Start Date could result in no forecasted data (winds) being used in the Oil Spill Model."/>
				</mx:VBox>				
				<!--MANUAL-->
				<mx:VBox width="100%" height="100%" horizontalAlign="left">
					<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
						<s:RadioButton group="{manualWindsChoice}" label="Constant Winds" right="10" value="0"  selected="true"/>
						<s:RadioButton group="{manualWindsChoice}" label="Time Series Winds" left="10" value="1"/>
					</s:HGroup>
					<mx:ViewStack id="manualWindsStack"  selectedIndex="{int(manualWindsChoice.selectedValue)}" change="sourceChangeWinds()" creationPolicy="all" width="100%" height="100%">
						<mx:VBox horizontalAlign="center" verticalGap="35">
							<s:Label text="Select Constant Wind Value" paddingTop="30" fontSize="16" fontWeight="bold"/>
							<mx:HBox paddingLeft="26" width="100%" verticalAlign="middle" horizontalAlign="left">
								<s:Label text="{ResourceManager.getInstance().getString('OilSpill','speed')}" id="windsSpeedLabel" width="60"/>
								<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="windsSpeed" height="24" width="80" text="1" change="windsSpeedChangeHandler()" restrict="0 1 2 3 4 5 6 7 8 9 ."  textAlign="left"/>
								<s:DropDownList id="windsSpeedType" change="windsSpeedTypeChangeHandler(event)" width="80" cornerRadius="3" selectedIndex="0" fontWeight="normal" lineThrough="false" textDecoration="none" textAlign="center" height="24">
									<mx:ArrayCollection>
										<fx:Object label="knots" data="knots"/>
										<fx:Object label="m / s" data="m/s"/>
										<fx:Object label="cm / s" data="cm/s"/>
										<fx:Object label="mm / s" data="mm/s"/>
									</mx:ArrayCollection>
								</s:DropDownList>
								<!--<s:Label text="{ResourceManager.getInstance().getString('OilSpill','direction')}" id="windsDirLabel" width="60"/>-->
								<s:DropDownList id="windsDir" width="80" cornerRadius="3" selectedIndex="0" fontWeight="normal" lineThrough="false" textDecoration="none" textAlign="center" height="24" >
									<mx:ArrayCollection>
										<fx:Object label="N" data="N"/>
										<fx:Object label="NNE" data="NNE"/>
										<fx:Object label="NE" data="NE"/>
										<fx:Object label="NEE" data="NEE"/>
										<fx:Object label="E" data="E"/>
										<fx:Object label="SEE" data="SEE"/>
										<fx:Object label="SE" data="SE"/>
										<fx:Object label="SSE" data="SSE"/>
										<fx:Object label="S" data="S"/>
										<fx:Object label="SSW" data="SSW"/>
										<fx:Object label="SW" data="SW"/>
										<fx:Object label="SWW" data="SWW"/>
										<fx:Object label="W" data="W"/>
										<fx:Object label="NWW" data="NWW"/>
										<fx:Object label="NW" data="NW"/>
										<fx:Object label="NNW" data="NNW"/>
									</mx:ArrayCollection>
								</s:DropDownList>
								<s:Label text="{ResourceManager.getInstance().getString('OilSpill','from')}" id="windsDirLabel2"  />
							</mx:HBox>
						</mx:VBox>
						<mx:HBox width="100%" height="100%" horizontalAlign="center">
							<mx:HBox  width="100%" height="100%" horizontalAlign="center">
								<mx:VBox height="100%" horizontalAlign="center">
									<mx:DataGrid id="manualWindsDG" height="205" paddingTop="5" change="updateWindsManual" dataProvider="{manualWindsRows}" editable="true" sortableColumns="false">
										<mx:columns>
											<mx:DataGridColumn headerText="Time" dataField="Time" editable="false" width="120"/>
											<mx:DataGridColumn headerText="Speed" dataField="Rate" editable="true" width="60"/>
											<mx:DataGridColumn headerText="Direction" dataField="Direction" editable="true" width="70"/>
										</mx:columns>
									</mx:DataGrid>
								</mx:VBox>
							</mx:HBox>
							<mx:HBox height="100%" horizontalAlign="center" paddingLeft="53" verticalAlign="bottom" >
								<s:Button id="saveEditManualED" label="{ResourceManager.getInstance().getString('OilSpill','saveManualED')}" width="110" click="saveEditManualED_clickHandler(event)"/>
								<s:Button id="loadManualED" label="{ResourceManager.getInstance().getString('OilSpill','loadFromLocal')}" width="110" click="loadManualED_clickHandler(event)"/>
								<s:Button id="saveManualED" label="{ResourceManager.getInstance().getString('OilSpill','saveToLocal')}" width="110" click="saveManualED_clickHandler(event)"/>
							</mx:HBox>
						</mx:HBox>
					</mx:ViewStack>
				</mx:VBox>
				<!--NONE-->
				<mx:VBox width="100%" height="100%">					
				</mx:VBox>
				<!--LOCAL-->
				<mx:VBox width="100%" height="100%"/>
				<!--NOWCASTING-->
				<mx:VBox width="100%" height="100%">					
				</mx:VBox>		
			</mx:ViewStack>			
			<s:HGroup horizontalAlign="center" width="100%" verticalAlign="bottom" >
				<mx:SWFLoader id="windsLoader" source="assets/images/loader.swf" horizontalCenter="0" bottom="41" visible="false" width="37" height="37"/>
				<s:Button fontSize="12" fontWeight="bold"  cornerRadius="5" label="{ResourceManager.getInstance().getString('OilSpill','previous')}" click="showStateSpill()" />
				<s:Button fontSize="12" fontWeight="bold" cornerRadius="5" label="{ResourceManager.getInstance().getString('OilSpill','next')}" click="generateManualWindsShowStateCurrents()" />
			</s:HGroup>
		</s:VGroup>		
		<!--NEW CURRENTS-->	
		<s:VGroup id="currents" includeIn="currents" width="100%" height="100%" horizontalAlign="center">			
			<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
				<s:Label text="{ResourceManager.getInstance().getString('OilSpill','currentsDataSource')}"/>
				<s:DropDownList id="currents_" change="{sourceChangeCurrents()}" cornerRadius="3" height="24" width="135" selectedIndex="{sourceSelectedIndex}">
					<!--<mx:ArrayCollection>
						<fx:Object label="{ResourceManager.getInstance().getString('OilSpill','none2')}" data="NONE"/>
						<fx:Object label="{ResourceManager.getInstance().getString('OilSpill','manual2')}" data="MANUAL"/>
						<fx:Object label="Nowcasting" data="NOWCAST"/>
						<fx:Object label="EDS" data="EDS"/>
					</mx:ArrayCollection>-->
				</s:DropDownList>
			</s:HGroup>
			<mx:ViewStack id="currentStack" selectedIndex="{currents_.selectedIndex}" creationPolicy="all" width="100%" height="100%">				
				<!--EDS-->
				<mx:VBox width="100%" height="100%">
					<s:List id="currentsList" selectedIndex="{sourceSelectedIndex}" width="100%" height="100%" dataProvider="{curDP}" change="{handleListChangeCurrents(event)}"/>
					<s:Label id="selectedSource_currents" text=" " verticalAlign="middle"/>
					<s:BorderContainer width="100%" height="75" backgroundAlpha="0.15" borderVisible="false">
						<s:VGroup id="metaBoxC" height="95" width="100%" gap="3" rowHeight="20" variableRowHeight="false" >
							<mx:Label id="metaNameC" fontSize="13" height="13"/>
							<mx:Label id="metaBBOXC" fontSize="13" height="13"/>
							<mx:Label id="metaDateC" fontSize="13" height="13"/>
							<mx:Label id="metaIDC"  visible="false" fontSize="11" height="0"/>
						</s:VGroup>
					</s:BorderContainer>
					<s:Label paddingTop="3" id="timeDisclaimercurrents" visible="{toEarly}" top="218" paddingLeft="10" width="495" color="0xcd1b21" fontSize="12" fontWeight="bold" text="The selected Start Date is beyond the normal data availability range.  Please note that using this Start Date could result in no forecasted data (currents) being used in the Oil Spill Model."/>
				</mx:VBox>
				<!--MANUAL-->
				<mx:VBox width="100%" height="100%" horizontalAlign="left">
					<s:HGroup width="100%" verticalAlign="middle" horizontalAlign="center">
						<s:RadioButton group="{manualCurrentsChoice}" label="Constant Currents" right="10" value="0" selected="true"/>
						<s:RadioButton group="{manualCurrentsChoice}" label="Time Series Currents" left="10" value="1"/>
					</s:HGroup>
					<mx:ViewStack id="manualCurrentsStack"  selectedIndex="{int(manualCurrentsChoice.selectedValue)}" change="sourceChangeCurrents()" creationPolicy="all" width="100%" height="100%">
						<mx:VBox horizontalAlign="center" verticalGap="35">
							<s:Label text="Select Constant Current Value" paddingTop="20" fontSize="16" fontWeight="bold"/>
							<mx:HBox paddingLeft="26" width="100%" verticalAlign="middle" horizontalAlign="left">
								<s:Label text="{ResourceManager.getInstance().getString('OilSpill','speed')}" id="currentsSpeedLabel" width="60" />
								<mx:TextInput borderSkin="mx.skins.halo.HaloBorder" id="currentsSpeed" height="24" text="1" change="currentsSpeedChangeHandler()" restrict="0-9"  textAlign="left" width="80"/>
								<s:DropDownList id="currentsSpeedType" change="currentsSpeedTypeChangeHandler(event)" width="80" cornerRadius="3" selectedIndex="0" fontWeight="normal" lineThrough="false" textDecoration="none" textAlign="center" height="24">
									<mx:ArrayCollection>
										<fx:Object label="knots" data="knots"/>
										<fx:Object label="m / s" data="m/s"/>
										<fx:Object label="cm / s" data="cm/s"/>
										<fx:Object label="mm / s" data="mm/s"/>
									</mx:ArrayCollection>
								</s:DropDownList>
								<!--<s:Label text="{ResourceManager.getInstance().getString('OilSpill','direction')}" id="currentsDirLabel" width="60"/>-->
								<s:DropDownList id="currentsDir" change="{sourceChangeCurrents()}" width="80" cornerRadius="3" selectedIndex="0" fontWeight="normal" lineThrough="false" textDecoration="none" textAlign="center" height="24">
									<mx:ArrayCollection>
										<fx:Object label="N" data="N"/>
										<fx:Object label="NNE" data="NNE"/>
										<fx:Object label="NE" data="NE"/>
										<fx:Object label="NEE" data="NEE"/>
										<fx:Object label="E" data="E"/>
										<fx:Object label="SEE" data="SEE"/>
										<fx:Object label="SE" data="SE"/>
										<fx:Object label="SSE" data="SSE"/>
										<fx:Object label="S" data="S"/>
										<fx:Object label="SSW" data="SSW"/>
										<fx:Object label="SW" data="SW"/>
										<fx:Object label="SWW" data="SWW"/>
										<fx:Object label="W" data="W"/>
										<fx:Object label="NWW" data="NWW"/>
										<fx:Object label="NW" data="NW"/>
										<fx:Object label="NNW" data="NNW"/>
									</mx:ArrayCollection>
								</s:DropDownList>
								<s:Label text="{ResourceManager.getInstance().getString('OilSpill','towards')}" id="currentsDirLabel2" />
							</mx:HBox> 
						</mx:VBox>	
						<mx:HBox width="100%" height="100%" horizontalAlign="center">
							<mx:HBox width="100%" height="100%" horizontalAlign="center">
								<mx:VBox height="100%" horizontalAlign="center">
									<mx:DataGrid id="manualCurrentsDG" height="205" dataProvider="{manualCurrentsRows}" editable="true" sortableColumns="false">
										<mx:columns>
											<mx:DataGridColumn headerText="Time" dataField="Time" editable="false" width="120"/>
											<mx:DataGridColumn headerText="Speed" dataField="Rate" editable="true" width="60"/>
											<mx:DataGridColumn headerText="Direction" dataField="Direction" editable="true" width="70"/>
										</mx:columns>
									</mx:DataGrid>
								</mx:VBox>
							</mx:HBox>
							<mx:HBox height="100%" horizontalAlign="center" verticalAlign="bottom" paddingLeft="53">
								<s:Button id="saveEditManualED2" label="{ResourceManager.getInstance().getString('OilSpill','saveManualED')}" width="110" click="saveEditManualED2_clickHandler(event)"/>
								<s:Button id="loadManualED2" label="{ResourceManager.getInstance().getString('OilSpill','loadFromLocal')}" width="110" click="loadManualED2_clickHandler(event)"/>
								<s:Button id="saveManualED2" label="{ResourceManager.getInstance().getString('OilSpill','saveToLocal')}" width="110" click="saveManualED2_clickHandler(event)"/>
							</mx:HBox>
						</mx:HBox>
					</mx:ViewStack>
				</mx:VBox>
				<!--NONE-->
				<mx:VBox width="100%" height="100%">
				</mx:VBox>
				
				<!--NOWCASTING-->
				<mx:VBox width="100%" height="100%">
				</mx:VBox>
			</mx:ViewStack>
			<s:HGroup horizontalAlign="center" width="100%" verticalAlign="bottom" >
				<mx:SWFLoader id="currentsLoader" source="assets/images/loader.swf" horizontalCenter="0" bottom="41" visible="false" width="37" height="37"/>				
				<s:Button fontWeight="bold" fontSize="12" cornerRadius="5" horizontalCenter="-50" bottom="0"  label="{ResourceManager.getInstance().getString('OilSpill','previous')}" click="showStateWinds()" />
				<s:Button fontWeight="bold" fontSize="12" cornerRadius="5" horizontalCenter="50" bottom="0"   label="{ResourceManager.getInstance().getString('OilSpill','next')}" click="generateManualCurrentsShowStateReview()" />		
			</s:HGroup>
		</s:VGroup>
		<!--REVIEW PANEL-->	
		<s:Group id="Review" includeIn="review" width="100%" height="100%">
			<s:Label text="{ResourceManager.getInstance().getString('OilSpill','reviewPara')}" horizontalCenter="0" top="10" fontWeight="bold" fontSize="16" />
			<mx:HRule width=" 100%" top="30"/>
			<s:Label text="{ResourceManager.getInstance().getString('OilSpill','sceProperties')}" left="10" top="41" fontSize="14" fontWeight="bold" />
			<s:HGroup left="15" top="64" >
				<s:Label fontWeight="bold" text="{ResourceManager.getInstance().getString('OilSpill','startDate')}" fontSize="12"/>
				<s:Label text="{date}" id="strtDateText" styleName="reviewHighlight" />
				<s:Label fontWeight="bold" text="{ResourceManager.getInstance().getString('OilSpill','length')}" fontSize="12"/>
				<s:Label text="{simlength.value}" styleName="reviewHighlight" />
				<s:Label text="hours" />
			</s:HGroup>
			<mx:HRule width=" 100%" top="83"/>
			<s:Label text="{ResourceManager.getInstance().getString('OilSpill','spillDescription')}" left="10" top="96" fontSize="14" fontWeight="bold" />
			<s:HGroup left="15" top="116" >
				<s:Label fontWeight="bold" text="{ResourceManager.getInstance().getString('OilSpill','type')}" fontSize="12"/>
				<s:Label id="revTYPE" text="{SpillType.selectedItem.label}" styleName="reviewHighlight"/>
				<s:Label fontWeight="bold" text="{ResourceManager.getInstance().getString('OilSpill','amount')}" fontSize="12"/>
				<s:Label id="revAMNT" text="{volume.text +' '+ AmtType.selectedItem.label}" styleName="reviewHighlight"/>
				<s:Label fontWeight="bold" text="{ResourceManager.getInstance().getString('OilSpill','duration')}" fontSize="12"/>
				<s:Label id="revDUR" text="{durSpill.value}" styleName="reviewHighlight"/>
				<s:Label text="hrs" />
			</s:HGroup>
			<mx:HRule width=" 100%" top="140"/>
			<s:Label text="{ResourceManager.getInstance().getString('OilSpill','environmentalFactors')}" left="10" top="147" fontSize="14" fontWeight="bold" />
			<s:HGroup left="15" top="167" >
				<s:Label fontWeight="bold" text="{ResourceManager.getInstance().getString('OilSpill','winds')}" width="100" fontSize="12"/>
				<s:Label id="revWIND" text="{windtype}" styleName="reviewHighlight"/>
			</s:HGroup>
			<s:HGroup left="15" top="187" >
				<s:Label fontWeight="bold" text="{ResourceManager.getInstance().getString('OilSpill','currents')}" width="100" fontSize="12"/>
				<s:Label id="revCUR" text="{curtype}" styleName="reviewHighlight"/>
			</s:HGroup>
			<s:Label id="timeDisclaimer" visible="{reviewDis}" top="218" paddingLeft="12" width="495" color="0xcd1b21" fontSize="12" fontWeight="bold" text="The selected Start Date is beyond the normal data availability range.  Please note that using this Start Date could result in no forecasted data (winds or currents) being used in the Oil Spill Model."/>
			<mx:SWFLoader id="loader" source="assets/images/loader.swf" horizontalCenter="0" bottom="41" visible="false" width="40" height="40"/>			
			<s:Button fontSize="12" fontWeight="bold"   cornerRadius="5" horizontalCenter="50" bottom="0"   label="{ResourceManager.getInstance().getString('OilSpill','run')}" width="70" click="checkRun()" />
			<s:Button fontSize="12" fontWeight="bold"   cornerRadius="5" horizontalCenter="-50" bottom="0"  label="{ResourceManager.getInstance().getString('OilSpill','previous')}" click="showStateCurrents()" />
		</s:Group>
		<!--GRAPH PANEL-->	
		<s:Group id="GraphPanel" includeIn="graph" width="100%" height="100%">
			<asa:AsaDatapanel id="datapanel" width="100%" height="100%" />
		</s:Group>
		<!--LAYER PANEL-->	
		<s:VGroup id="LayerPanel" includeIn="layers" horizontalAlign="left" width="100%" height="100%">
			<s:HGroup gap="3" paddingTop="9" horizontalAlign="left">
				<s:VGroup paddingLeft="12" paddingTop="5" width="50%">
					<s:Label fontSize="14" text="{ResourceManager.getInstance().getString('OilSpill','oilSpillSce')}" fontWeight="bold" />
					<s:Label text="{response}" paddingTop="5" fontSize="13" id="spillTitle"  fontStyle="italic"/>
					<s:Label text="Layers" fontWeight="bold" paddingBottom="3" paddingTop="14" fontSize="13"/>
					<s:CheckBox id="trackline" label="{ResourceManager.getInstance().getString('OilSpill','trackline')}" click="updateMapLayers()" fontWeight="normal" selected="true" />
					<s:CheckBox id="contour"   label="{ResourceManager.getInstance().getString('OilSpill','contour')}"   click="updateMapLayers()" fontWeight="normal" selected="true" />
					<s:CheckBox id="mass" 	   label="{ResourceManager.getInstance().getString('OilSpill','mass')}" 	 click="updateMapLayers()" fontWeight="normal" selected="true" />
					<s:CheckBox id="spillets"  label="{ResourceManager.getInstance().getString('OilSpill','spillets')}"  click="updateMapLayers()" fontWeight="normal" selected="true" />
					<s:CheckBox id="swept"     label="{ResourceManager.getInstance().getString('OilSpill','swept')}" 	 click="updateMapLayers()" fontWeight="normal" selected="true" />
					<!--<s:HGroup>
						<s:CheckBox id="oilWarningLayerCheck" label="Spill Warning Area" click="{oilWarningLayer.visible = oilWarningLayerCheck.selected}" fontWeight="normal" selected="true" />
						<s:HGroup paddingTop="5">
							<mx:Image rotation="180" source="assets/legends/grey.jpg"/>
						</s:HGroup>
					</s:HGroup>-->
					<s:CheckBox id="winds"     label="Winds" click="updateMapLayersWin()" fontWeight="normal" visible="false" selected="true" />	
					<s:CheckBox id="curnts"    label="Currents"  click="updateMapLayersCur()" fontWeight="normal" visible="false" selected="true" />
					<s:Label width="180" id="timesliderL" creationComplete="fader.play();" color="0xcd1b21" fontSize="14" paddingTop="6" fontWeight="bold" text="Use the TimeSlider to animate oil spill results"/>
					<s:Button label="Clear Scenario" click="clearScenario()"/>
				</s:VGroup>
				<s:VGroup id="ecopLegendOption" gap="-1" paddingTop="-6" paddingLeft="10" horizontalAlign="center" >
					<!--<s:Label text="Legend" fontWeight="bold" paddingBottom="10" fontSize="14"/>-->
					<mx:Image id="oilLegendImage" source="assets/legends/oilspill.png"/>
				</s:VGroup>
			</s:HGroup>
		</s:VGroup>
	</viewer:WidgetTemplate>
</viewer:BaseWidget>