<?xml version="1.0" encoding="utf-8"?>
<!--
     ////////////////////////////////////////////////////////////////////////////////
     //
     // Copyright (c) 2010 ESRI
     //
     // All rights reserved under the copyright laws of the United States.
     // You may freely redistribute and use this software, with or
     // without modification, provided you include the original copyright
     // and use restrictions.  See use restrictions in the file:
     // <install location>/License.txt
     //
     ////////////////////////////////////////////////////////////////////////////////
-->
<viewer:BaseWidget xmlns:fx="http://ns.adobe.com/mxml/2009"
                   xmlns:s="library://ns.adobe.com/flex/spark"
                   xmlns:mx="library://ns.adobe.com/flex/mx"
                   xmlns:esri="http://www.esri.com/2008/ags"
                   xmlns:viewer="com.esri.viewer.*"
                   layout="absolute"
                   widgetConfigLoaded="init()">

    <fx:Script>
        <![CDATA[
            import com.esri.ags.TimeExtent;
            import com.esri.ags.layers.supportClasses.TimeInfo;

            [Bindable]
            private var sliderLoop:Boolean = false;
            [Bindable]
            private var sliderSingleThumbAsTimeInstant:Boolean = false;
            [Bindable]
            private var sliderThumbCount:int = 1;
            [Bindable]
            private var sliderThumbMovingRate:int = 1000;

            protected function init():void
            {
                if (configXML)
                {
                    var dateFormat:String = configXML.dateformat;
                    if (dateFormat)
                    {
                        myDateFormatter.formatString = dateFormat;
                    }
                    sliderLoop = configXML.loop == "true";
                    sliderSingleThumbAsTimeInstant = configXML.singlethumbastimeinstant == "true";
                    if (!isNaN(parseInt(configXML.thumbcount)))
                    {
                        sliderThumbCount = parseInt(configXML.thumbcount);
                    }
                    if (!isNaN(parseInt(configXML.thumbmovingrate)))
                    {
                        sliderThumbMovingRate = parseInt(configXML.thumbmovingrate);
                    }
                    var timeExtent:TimeExtent;
                    var startTime:Number = Date.parse(configXML.timeextent.starttime);
                    var endTime:Number = Date.parse(configXML.timeextent.endtime);
                    if (!isNaN(startTime) && !isNaN(endTime))
                    {
                        timeExtent = new TimeExtent();
                        timeExtent.startTime = new Date(startTime);
                        timeExtent.endTime = new Date(endTime);
                    }
                    if (timeExtent)
                    {
                        var timeStopsInterval:Number = parseFloat(configXML.timestopsinterval);
                        var timeStopsUnits:String;
                        var timeStopsUnitsConfig:String = configXML.timestopsunits || "";
                        switch (timeStopsUnitsConfig.toLowerCase())
                        {
                            case "years":
                            {
                                timeStopsUnits = TimeInfo.UNIT_YEARS;
                                break;
                            }
                            case "months":
                            {
                                timeStopsUnits = TimeInfo.UNIT_MONTHS;
                                break;
                            }
                            case "days":
                            {
                                timeStopsUnits = TimeInfo.UNIT_DAYS;
                                break;
                            }
                            case "hours":
                            {
                                timeStopsUnits = TimeInfo.UNIT_HOURS;
                                break;
                            }
                            case "minutes":
                            {
                                timeStopsUnits = TimeInfo.UNIT_MINUTES;
                                break;
                            }
                            case "seconds":
                            {
                                timeStopsUnits = TimeInfo.UNIT_SECONDS;
                                break;
                            }
                        }
                        if (timeStopsUnits && !isNaN(timeStopsInterval))
                        {
                            timeSlider.createTimeStopsByTimeInterval(timeExtent, timeStopsInterval, timeStopsUnits);
                        }
                        else
                        {
                            timeSlider.createTimeStopsByCount(timeExtent);
                        }
                    }
                }
            }

            protected function widgetClosedHandler(event:Event):void
            {
                timeSlider.pause();
                map.timeSlider = null;
                map.timeExtent = null;
            }

            protected function widgetOpenedHandler(event:Event):void
            {
                map.timeSlider = timeSlider;
            }
        ]]>
    </fx:Script>
    <fx:Declarations>
        <mx:DateFormatter id="myDateFormatter" formatString="MMMM, YYYY"/>
    </fx:Declarations>
    <viewer:WidgetTemplate id="wTemplate"
                           width="335" height="115"
                           closed="widgetClosedHandler(event)"
                           minHeight="115"
                           minWidth="335"
                           open="widgetOpenedHandler(event)">
        <viewer:layout>
            <s:VerticalLayout gap="10"
                              horizontalAlign="center"
                              paddingTop="4"/>
        </viewer:layout>
        <s:Label fontSize="14"
                 horizontalCenter="true"
                 text="{myDateFormatter.format(timeSlider.timeExtent.endTime)}"/>
        <esri:TimeSlider id="timeSlider"
                         width="100%"
                         loop="{sliderLoop}"
                         singleThumbAsTimeInstant="{sliderSingleThumbAsTimeInstant}"
                         thumbCount="{sliderThumbCount}"
                         thumbMovingRate="{sliderThumbMovingRate}"/>
    </viewer:WidgetTemplate>
</viewer:BaseWidget>
