<?xml version="1.0" encoding="utf-8"?>
<!-- http://blog.flexexamples.com/2010/04/08/setting-the-disabled-alpha-on-a-spark-textinput-control-in-flex-4/ -->
<s:SparkSkin name="CustomTextInputSkin"
			 xmlns:fx="http://ns.adobe.com/mxml/2009"
			 xmlns:s="library://ns.adobe.com/flex/spark"
			 xmlns:fb="http://ns.adobe.com/flashbuilder/2009"
			 alpha.disabled="0.2"
			 blendMode="normal">
	<!-- states -->
	<s:states>
		<s:State name="normal"/>
		<s:State name="disabled"/>
		<s:State name="disabledWithPrompt"/>
		<s:State name="normalWithPrompt"/>
	</s:states>
	
	<fx:Metadata>
		[HostComponent("spark.components.TextInput")]
	</fx:Metadata>
	
	<fx:Script fb:purpose="styling">
		<![CDATA[
			private var paddingChanged:Boolean;
			
			/* Define the skin elements that should not be colorized. */
			static private const exclusions:Array = ["background", "textDisplay"];
			
			override public function get colorizeExclusions():Array {
				return exclusions;
			}
			
			/* Define the content fill items that should be colored by the "contentBackgroundColor" style. */
			static private const contentFill:Array = ["bgFill"];
			
			override public function get contentItems():Array {
				return contentFill;
			}
			
			override protected function commitProperties():void
			{
				super.commitProperties();
				
				if (paddingChanged)
				{
					updatePadding();
					paddingChanged = false;
				}
			}
			
			override protected function initializationComplete():void
			{
				useChromeColor = true;
				super.initializationComplete();
			}
			
			override protected function updateDisplayList(unscaledWidth:Number, unscaledHeight:Number):void
			{
				if (getStyle("borderVisible") == true)
				{
					border.visible = true;
					shadow.visible = true;
					background.left = background.top = background.right = background.bottom = 1;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 1;
				}
				else
				{
					border.visible = false;
					shadow.visible = false;
					background.left = background.top = background.right = background.bottom = 0;
					textDisplay.left = textDisplay.top = textDisplay.right = textDisplay.bottom = 0;
				}
				
				borderStroke.color = 0xB21919;
				borderStroke.alpha = getStyle("borderAlpha");
				
				super.updateDisplayList(unscaledWidth, unscaledHeight);
			}
			
			private function updatePadding():void
			{
				if (!textDisplay)
					return;
				
				// Push padding styles into the textDisplay
				var padding:Number;
				
				padding = getStyle("paddingLeft");
				if (textDisplay.getStyle("paddingLeft") != padding)
					textDisplay.setStyle("paddingLeft", padding);
				
				padding = getStyle("paddingTop");
				if (textDisplay.getStyle("paddingTop") != padding)
					textDisplay.setStyle("paddingTop", padding);
				
				padding = getStyle("paddingRight");
				if (textDisplay.getStyle("paddingRight") != padding)
					textDisplay.setStyle("paddingRight", padding);
				
				padding = getStyle("paddingBottom");
				if (textDisplay.getStyle("paddingBottom") != padding)
					textDisplay.setStyle("paddingBottom", padding);
			}
			
			override public function styleChanged(styleProp:String):void
			{
				var allStyles:Boolean = !styleProp || styleProp == "styleName";
				
				super.styleChanged(styleProp);
				
				if (allStyles || styleProp.indexOf("padding") == 0)
				{
					paddingChanged = true;
					invalidateProperties();
				}
			}
		]]>
	</fx:Script>
	
	<fx:Script>
		<![CDATA[
			private static const focusExclusions:Array = ["textDisplay"];
			
			override public function get focusSkinExclusions():Array {
				return focusExclusions;
			}
		]]>
	</fx:Script>
	
	<!-- border -->
	<s:Rect left="0" right="0" top="0" bottom="0" id="border">
		<s:stroke>
			<s:SolidColorStroke joints="round" id="borderStroke" weight="0" />
		</s:stroke>
	</s:Rect>
	
	<!-- fill -->
	<!--- Defines the appearance of the TextInput component's background. -->
	<s:Rect id="background" left="1" right="1" top="1" bottom="1">
		<s:fill>
			<!--- Defines the background fill color. -->
			<s:SolidColor id="bgFill"  color="0x000000" />
		</s:fill>
	</s:Rect>
	
	<!-- shadow -->
	<s:Rect left="1" top="1" right="1" height="1" id="shadow">
		<s:fill>
			<s:SolidColor color="0x000000" alpha="0.12" />
		</s:fill>
	</s:Rect>
	
	<!-- text -->
	<s:RichEditableText id="textDisplay"
						verticalAlign="middle"
						widthInChars="10"
						left="1" right="1" top="1" bottom="1" />
	
</s:SparkSkin>
